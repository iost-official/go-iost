// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: rpc/pb/rpc.proto

package rpcpb

import (
	pb "github.com/iost-official/go-iost/v3/core/block/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The enumeration defines transaction receipt status code.
type TxReceipt_StatusCode int32

const (
	// success
	TxReceipt_SUCCESS TxReceipt_StatusCode = 0
	// run out of gas
	TxReceipt_GAS_RUN_OUT TxReceipt_StatusCode = 1
	// balance not enough
	TxReceipt_BALANCE_NOT_ENOUGH TxReceipt_StatusCode = 2
	// wrong parameter
	TxReceipt_WRONG_PARAMETER TxReceipt_StatusCode = 3
	// runtime error
	TxReceipt_RUNTIME_ERROR TxReceipt_StatusCode = 4
	// run out of time
	TxReceipt_TIMEOUT TxReceipt_StatusCode = 5
	// wrong transaction format
	TxReceipt_WRONG_TX_FORMAT TxReceipt_StatusCode = 6
	// more than one set code action in a transaction
	TxReceipt_DUPLICATE_SET_CODE TxReceipt_StatusCode = 7
	// unknown error
	TxReceipt_UNKNOWN_ERROR TxReceipt_StatusCode = 8
)

// Enum value maps for TxReceipt_StatusCode.
var (
	TxReceipt_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "GAS_RUN_OUT",
		2: "BALANCE_NOT_ENOUGH",
		3: "WRONG_PARAMETER",
		4: "RUNTIME_ERROR",
		5: "TIMEOUT",
		6: "WRONG_TX_FORMAT",
		7: "DUPLICATE_SET_CODE",
		8: "UNKNOWN_ERROR",
	}
	TxReceipt_StatusCode_value = map[string]int32{
		"SUCCESS":            0,
		"GAS_RUN_OUT":        1,
		"BALANCE_NOT_ENOUGH": 2,
		"WRONG_PARAMETER":    3,
		"RUNTIME_ERROR":      4,
		"TIMEOUT":            5,
		"WRONG_TX_FORMAT":    6,
		"DUPLICATE_SET_CODE": 7,
		"UNKNOWN_ERROR":      8,
	}
)

func (x TxReceipt_StatusCode) Enum() *TxReceipt_StatusCode {
	p := new(TxReceipt_StatusCode)
	*p = x
	return p
}

func (x TxReceipt_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxReceipt_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[0].Descriptor()
}

func (TxReceipt_StatusCode) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[0]
}

func (x TxReceipt_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxReceipt_StatusCode.Descriptor instead.
func (TxReceipt_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{6, 0}
}

// The enumeration defines transaction status.
type TransactionResponse_Status int32

const (
	// pending in transaction pool
	TransactionResponse_PENDING TransactionResponse_Status = 0
	// packed in a block that has not been confirmed
	TransactionResponse_PACKED TransactionResponse_Status = 1
	// packed in a block that is irreversible
	TransactionResponse_IRREVERSIBLE TransactionResponse_Status = 2
)

// Enum value maps for TransactionResponse_Status.
var (
	TransactionResponse_Status_name = map[int32]string{
		0: "PENDING",
		1: "PACKED",
		2: "IRREVERSIBLE",
	}
	TransactionResponse_Status_value = map[string]int32{
		"PENDING":      0,
		"PACKED":       1,
		"IRREVERSIBLE": 2,
	}
)

func (x TransactionResponse_Status) Enum() *TransactionResponse_Status {
	p := new(TransactionResponse_Status)
	*p = x
	return p
}

func (x TransactionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[1].Descriptor()
}

func (TransactionResponse_Status) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[1]
}

func (x TransactionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResponse_Status.Descriptor instead.
func (TransactionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{8, 0}
}

// The enumeration defines the signature algorithm.
type Signature_Algorithm int32

const (
	// unknown
	Signature_UNKNOWN Signature_Algorithm = 0
	// secp256k1
	Signature_SECP256K1 Signature_Algorithm = 1
	// ed25519
	Signature_ED25519 Signature_Algorithm = 2
)

// Enum value maps for Signature_Algorithm.
var (
	Signature_Algorithm_name = map[int32]string{
		0: "UNKNOWN",
		1: "SECP256K1",
		2: "ED25519",
	}
	Signature_Algorithm_value = map[string]int32{
		"UNKNOWN":   0,
		"SECP256K1": 1,
		"ED25519":   2,
	}
)

func (x Signature_Algorithm) Enum() *Signature_Algorithm {
	p := new(Signature_Algorithm)
	*p = x
	return p
}

func (x Signature_Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Signature_Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[2].Descriptor()
}

func (Signature_Algorithm) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[2]
}

func (x Signature_Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Signature_Algorithm.Descriptor instead.
func (Signature_Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{9, 0}
}

// The enumeration defines block status.
type BlockResponse_Status int32

const (
	// pending in block cache
	BlockResponse_PENDING BlockResponse_Status = 0
	// irreversible
	BlockResponse_IRREVERSIBLE BlockResponse_Status = 1
)

// Enum value maps for BlockResponse_Status.
var (
	BlockResponse_Status_name = map[int32]string{
		0: "PENDING",
		1: "IRREVERSIBLE",
	}
	BlockResponse_Status_value = map[string]int32{
		"PENDING":      0,
		"IRREVERSIBLE": 1,
	}
)

func (x BlockResponse_Status) Enum() *BlockResponse_Status {
	p := new(BlockResponse_Status)
	*p = x
	return p
}

func (x BlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[3].Descriptor()
}

func (BlockResponse_Status) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[3]
}

func (x BlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockResponse_Status.Descriptor instead.
func (BlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{12, 0}
}

// The enumeration defines block status.
type RawBlockResponse_Status int32

const (
	// pending in block cache
	RawBlockResponse_PENDING RawBlockResponse_Status = 0
	// irreversible
	RawBlockResponse_IRREVERSIBLE RawBlockResponse_Status = 1
)

// Enum value maps for RawBlockResponse_Status.
var (
	RawBlockResponse_Status_name = map[int32]string{
		0: "PENDING",
		1: "IRREVERSIBLE",
	}
	RawBlockResponse_Status_value = map[string]int32{
		"PENDING":      0,
		"IRREVERSIBLE": 1,
	}
)

func (x RawBlockResponse_Status) Enum() *RawBlockResponse_Status {
	p := new(RawBlockResponse_Status)
	*p = x
	return p
}

func (x RawBlockResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RawBlockResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[4].Descriptor()
}

func (RawBlockResponse_Status) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[4]
}

func (x RawBlockResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RawBlockResponse_Status.Descriptor instead.
func (RawBlockResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{13, 0}
}

type ListContractStorageRequest_StorageType int32

const (
	// written by storage.put(..., ...)
	ListContractStorageRequest_KV ListContractStorageRequest_StorageType = 0
	// written by storage.mapPut(..., ..., ...)
	ListContractStorageRequest_MAP ListContractStorageRequest_StorageType = 1
)

// Enum value maps for ListContractStorageRequest_StorageType.
var (
	ListContractStorageRequest_StorageType_name = map[int32]string{
		0: "KV",
		1: "MAP",
	}
	ListContractStorageRequest_StorageType_value = map[string]int32{
		"KV":  0,
		"MAP": 1,
	}
)

func (x ListContractStorageRequest_StorageType) Enum() *ListContractStorageRequest_StorageType {
	p := new(ListContractStorageRequest_StorageType)
	*p = x
	return p
}

func (x ListContractStorageRequest_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListContractStorageRequest_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[5].Descriptor()
}

func (ListContractStorageRequest_StorageType) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[5]
}

func (x ListContractStorageRequest_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListContractStorageRequest_StorageType.Descriptor instead.
func (ListContractStorageRequest_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{36, 0}
}

type Event_Topic int32

const (
	// contract receipt
	Event_CONTRACT_RECEIPT Event_Topic = 0
	// contract event
	Event_CONTRACT_EVENT Event_Topic = 1
)

// Enum value maps for Event_Topic.
var (
	Event_Topic_name = map[int32]string{
		0: "CONTRACT_RECEIPT",
		1: "CONTRACT_EVENT",
	}
	Event_Topic_value = map[string]int32{
		"CONTRACT_RECEIPT": 0,
		"CONTRACT_EVENT":   1,
	}
)

func (x Event_Topic) Enum() *Event_Topic {
	p := new(Event_Topic)
	*p = x
	return p
}

func (x Event_Topic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Topic) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_pb_rpc_proto_enumTypes[6].Descriptor()
}

func (Event_Topic) Type() protoreflect.EnumType {
	return &file_rpc_pb_rpc_proto_enumTypes[6]
}

func (x Event_Topic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Topic.Descriptor instead.
func (Event_Topic) EnumDescriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{45, 0}
}

// The message defines an empty request.
type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{0}
}

// The message defines network connection information.
type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// local network ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// peer connection count
	PeerCount int32 `protobuf:"varint,2,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkInfo) GetPeerCount() int32 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

// The message containing blockchain's ram information.
type RAMInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how many bytes have been used
	UsedRam int64 `protobuf:"varint,1,opt,name=used_ram,json=usedRam,proto3" json:"used_ram,omitempty"`
	// how many bytes have not been used
	AvailableRam int64 `protobuf:"varint,2,opt,name=available_ram,json=availableRam,proto3" json:"available_ram,omitempty"`
	// total ram byte
	TotalRam int64 `protobuf:"varint,3,opt,name=total_ram,json=totalRam,proto3" json:"total_ram,omitempty"`
	// User can sell NUM bytes RAM to system to get `NUM * sell_price` IOSTs
	SellPrice float64 `protobuf:"fixed64,4,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	// User can spend approximate `NUM * buy_price` IOSTs for NUM bytes RAM
	BuyPrice float64 `protobuf:"fixed64,5,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
}

func (x *RAMInfoResponse) Reset() {
	*x = RAMInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RAMInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAMInfoResponse) ProtoMessage() {}

func (x *RAMInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAMInfoResponse.ProtoReflect.Descriptor instead.
func (*RAMInfoResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *RAMInfoResponse) GetUsedRam() int64 {
	if x != nil {
		return x.UsedRam
	}
	return 0
}

func (x *RAMInfoResponse) GetAvailableRam() int64 {
	if x != nil {
		return x.AvailableRam
	}
	return 0
}

func (x *RAMInfoResponse) GetTotalRam() int64 {
	if x != nil {
		return x.TotalRam
	}
	return 0
}

func (x *RAMInfoResponse) GetSellPrice() float64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *RAMInfoResponse) GetBuyPrice() float64 {
	if x != nil {
		return x.BuyPrice
	}
	return 0
}

// The message containing the node's information.
type NodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// build time
	BuildTime string `protobuf:"bytes,1,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	// git hash
	GitHash string `protobuf:"bytes,2,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
	// node mode
	Mode string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// network connection information
	Network *NetworkInfo `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// code version string
	CodeVersion string `protobuf:"bytes,5,opt,name=code_version,json=codeVersion,proto3" json:"code_version,omitempty"`
	// server time
	ServerTime int64 `protobuf:"varint,6,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (x *NodeInfoResponse) Reset() {
	*x = NodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoResponse) ProtoMessage() {}

func (x *NodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoResponse.ProtoReflect.Descriptor instead.
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInfoResponse) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

func (x *NodeInfoResponse) GetGitHash() string {
	if x != nil {
		return x.GitHash
	}
	return ""
}

func (x *NodeInfoResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NodeInfoResponse) GetNetwork() *NetworkInfo {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *NodeInfoResponse) GetCodeVersion() string {
	if x != nil {
		return x.CodeVersion
	}
	return ""
}

func (x *NodeInfoResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

// The message defines transaction amount limit struct.
type AmountLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token name
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// limit value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AmountLimit) Reset() {
	*x = AmountLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountLimit) ProtoMessage() {}

func (x *AmountLimit) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountLimit.ProtoReflect.Descriptor instead.
func (*AmountLimit) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *AmountLimit) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AmountLimit) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The message defines transaction action struct.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract name
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	// action name
	ActionName string `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	// data
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Action) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *Action) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *Action) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// The message defines the transaction receipt struct.
type TxReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction hash
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// gas usage
	GasUsage float64 `protobuf:"fixed64,2,opt,name=gas_usage,json=gasUsage,proto3" json:"gas_usage,omitempty"`
	// ram usage
	RamUsage map[string]int64 `protobuf:"bytes,3,rep,name=ram_usage,json=ramUsage,proto3" json:"ram_usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// status code
	StatusCode TxReceipt_StatusCode `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3,enum=rpcpb.TxReceipt_StatusCode" json:"status_code,omitempty"`
	// message
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// transaction returns
	Returns []string `protobuf:"bytes,6,rep,name=returns,proto3" json:"returns,omitempty"`
	// transaction receipts
	Receipts []*TxReceipt_Receipt `protobuf:"bytes,7,rep,name=receipts,proto3" json:"receipts,omitempty"`
}

func (x *TxReceipt) Reset() {
	*x = TxReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReceipt) ProtoMessage() {}

func (x *TxReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReceipt.ProtoReflect.Descriptor instead.
func (*TxReceipt) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *TxReceipt) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxReceipt) GetGasUsage() float64 {
	if x != nil {
		return x.GasUsage
	}
	return 0
}

func (x *TxReceipt) GetRamUsage() map[string]int64 {
	if x != nil {
		return x.RamUsage
	}
	return nil
}

func (x *TxReceipt) GetStatusCode() TxReceipt_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return TxReceipt_SUCCESS
}

func (x *TxReceipt) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TxReceipt) GetReturns() []string {
	if x != nil {
		return x.Returns
	}
	return nil
}

func (x *TxReceipt) GetReceipts() []*TxReceipt_Receipt {
	if x != nil {
		return x.Receipts
	}
	return nil
}

// The message defines transaction struct.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// transaction timestamp
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// expiration timestamp
	Expiration int64 `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// gas gas_ratio
	GasRatio float64 `protobuf:"fixed64,4,opt,name=gas_ratio,json=gasRatio,proto3" json:"gas_ratio,omitempty"`
	// gas limit
	GasLimit float64 `protobuf:"fixed64,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// delay nanoseconds
	Delay int64 `protobuf:"varint,6,opt,name=delay,proto3" json:"delay,omitempty"`
	// chain id
	ChainId uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// action list
	Actions []*Action `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	// signer list
	Signers []string `protobuf:"bytes,9,rep,name=signers,proto3" json:"signers,omitempty"`
	// publisher
	Publisher string `protobuf:"bytes,10,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// referred transaction hash
	ReferredTx string `protobuf:"bytes,11,opt,name=referred_tx,json=referredTx,proto3" json:"referred_tx,omitempty"`
	// amount limit
	AmountLimit []*AmountLimit `protobuf:"bytes,12,rep,name=amount_limit,json=amountLimit,proto3" json:"amount_limit,omitempty"`
	// transaction receipt
	TxReceipt *TxReceipt `protobuf:"bytes,13,opt,name=tx_receipt,json=txReceipt,proto3" json:"tx_receipt,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Transaction) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *Transaction) GetGasRatio() float64 {
	if x != nil {
		return x.GasRatio
	}
	return 0
}

func (x *Transaction) GetGasLimit() float64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Transaction) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *Transaction) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Transaction) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Transaction) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *Transaction) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Transaction) GetReferredTx() string {
	if x != nil {
		return x.ReferredTx
	}
	return ""
}

func (x *Transaction) GetAmountLimit() []*AmountLimit {
	if x != nil {
		return x.AmountLimit
	}
	return nil
}

func (x *Transaction) GetTxReceipt() *TxReceipt {
	if x != nil {
		return x.TxReceipt
	}
	return nil
}

// The message defines transaction response.
type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction status
	Status TransactionResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=rpcpb.TransactionResponse_Status" json:"status,omitempty"`
	// transaction
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// block number
	BlockNumber int64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionResponse) GetStatus() TransactionResponse_Status {
	if x != nil {
		return x.Status
	}
	return TransactionResponse_PENDING
}

func (x *TransactionResponse) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionResponse) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

// The message defines signature struct.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signature algorithm
	Algorithm Signature_Algorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=rpcpb.Signature_Algorithm" json:"algorithm,omitempty"`
	// signature bytes
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// public key
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *Signature) GetAlgorithm() Signature_Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return Signature_UNKNOWN
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// The message defines the transaction request.
type TransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction timestamp
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// expiration timestamp
	Expiration int64 `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// gas price
	GasRatio float64 `protobuf:"fixed64,3,opt,name=gas_ratio,json=gasRatio,proto3" json:"gas_ratio,omitempty"`
	// gas limit
	GasLimit float64 `protobuf:"fixed64,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// delay nanoseconds
	Delay int64 `protobuf:"varint,5,opt,name=delay,proto3" json:"delay,omitempty"`
	// chain id
	ChainId uint32 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// action list
	Actions []*Action `protobuf:"bytes,7,rep,name=actions,proto3" json:"actions,omitempty"`
	// amount limit
	AmountLimit []*AmountLimit `protobuf:"bytes,8,rep,name=amount_limit,json=amountLimit,proto3" json:"amount_limit,omitempty"`
	// signer list
	Signers []string `protobuf:"bytes,9,rep,name=signers,proto3" json:"signers,omitempty"`
	// signatures of signers
	Signatures []*Signature `protobuf:"bytes,10,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// publisher
	Publisher string `protobuf:"bytes,11,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// signatures of publisher
	PublisherSigs []*Signature `protobuf:"bytes,12,rep,name=publisher_sigs,json=publisherSigs,proto3" json:"publisher_sigs,omitempty"`
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TransactionRequest) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TransactionRequest) GetGasRatio() float64 {
	if x != nil {
		return x.GasRatio
	}
	return 0
}

func (x *TransactionRequest) GetGasLimit() float64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *TransactionRequest) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TransactionRequest) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *TransactionRequest) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TransactionRequest) GetAmountLimit() []*AmountLimit {
	if x != nil {
		return x.AmountLimit
	}
	return nil
}

func (x *TransactionRequest) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *TransactionRequest) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *TransactionRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *TransactionRequest) GetPublisherSigs() []*Signature {
	if x != nil {
		return x.PublisherSigs
	}
	return nil
}

// The message defines the block struct.
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// block version
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// parent block hash
	ParentHash string `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// transaction merkle tree root hash
	TxMerkleHash string `protobuf:"bytes,4,opt,name=tx_merkle_hash,json=txMerkleHash,proto3" json:"tx_merkle_hash,omitempty"`
	// transaction receipt merkle tree root hash
	TxReceiptMerkleHash string `protobuf:"bytes,5,opt,name=tx_receipt_merkle_hash,json=txReceiptMerkleHash,proto3" json:"tx_receipt_merkle_hash,omitempty"`
	// block number
	Number int64 `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	// block producer witness
	Witness string `protobuf:"bytes,7,opt,name=witness,proto3" json:"witness,omitempty"`
	// block timestamp
	Time int64 `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	// block gas usage
	GasUsage float64 `protobuf:"fixed64,9,opt,name=gas_usage,json=gasUsage,proto3" json:"gas_usage,omitempty"`
	// transaction count
	TxCount int64 `protobuf:"varint,10,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// extra information
	Info *Block_Info `protobuf:"bytes,11,opt,name=info,proto3" json:"info,omitempty"`
	// original info bytes
	OrigInfo string `protobuf:"bytes,13,opt,name=orig_info,json=origInfo,proto3" json:"orig_info,omitempty"`
	// block transactions
	Transactions []*Transaction `protobuf:"bytes,12,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *Block) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Block) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Block) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *Block) GetTxMerkleHash() string {
	if x != nil {
		return x.TxMerkleHash
	}
	return ""
}

func (x *Block) GetTxReceiptMerkleHash() string {
	if x != nil {
		return x.TxReceiptMerkleHash
	}
	return ""
}

func (x *Block) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetWitness() string {
	if x != nil {
		return x.Witness
	}
	return ""
}

func (x *Block) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Block) GetGasUsage() float64 {
	if x != nil {
		return x.GasUsage
	}
	return 0
}

func (x *Block) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Block) GetInfo() *Block_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Block) GetOrigInfo() string {
	if x != nil {
		return x.OrigInfo
	}
	return ""
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction status
	Status BlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=rpcpb.BlockResponse_Status" json:"status,omitempty"`
	// block
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *BlockResponse) GetStatus() BlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return BlockResponse_PENDING
}

func (x *BlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type RawBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transaction status
	Status RawBlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=rpcpb.RawBlockResponse_Status" json:"status,omitempty"`
	// block
	Block *pb.Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *RawBlockResponse) Reset() {
	*x = RawBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBlockResponse) ProtoMessage() {}

func (x *RawBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBlockResponse.ProtoReflect.Descriptor instead.
func (*RawBlockResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *RawBlockResponse) GetStatus() RawBlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return RawBlockResponse_PENDING
}

func (x *RawBlockResponse) GetBlock() *pb.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type BlockHeaderByRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockList []*pb.Block `protobuf:"bytes,1,rep,name=block_list,json=blockList,proto3" json:"block_list,omitempty"`
}

func (x *BlockHeaderByRangeResponse) Reset() {
	*x = BlockHeaderByRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderByRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderByRangeResponse) ProtoMessage() {}

func (x *BlockHeaderByRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderByRangeResponse.ProtoReflect.Descriptor instead.
func (*BlockHeaderByRangeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *BlockHeaderByRangeResponse) GetBlockList() []*pb.Block {
	if x != nil {
		return x.BlockList
	}
	return nil
}

// The message defines chain information response.
type ChainInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of network, such mainnet or testnet
	NetName string `protobuf:"bytes,1,opt,name=net_name,json=netName,proto3" json:"net_name,omitempty"`
	// the iost protocol version
	ProtocolVersion string `protobuf:"bytes,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// chain id
	ChainId uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// head block height
	HeadBlock int64 `protobuf:"varint,4,opt,name=head_block,json=headBlock,proto3" json:"head_block,omitempty"`
	// head block hash
	HeadBlockHash string `protobuf:"bytes,5,opt,name=head_block_hash,json=headBlockHash,proto3" json:"head_block_hash,omitempty"`
	// last irreversible block number
	LibBlock int64 `protobuf:"varint,6,opt,name=lib_block,json=libBlock,proto3" json:"lib_block,omitempty"`
	// last irreversible block hash
	LibBlockHash string `protobuf:"bytes,7,opt,name=lib_block_hash,json=libBlockHash,proto3" json:"lib_block_hash,omitempty"`
	// the current witness list
	WitnessList []string `protobuf:"bytes,8,rep,name=witness_list,json=witnessList,proto3" json:"witness_list,omitempty"`
	// the active witness list of lat irreversible block
	LibWitnessList []string `protobuf:"bytes,9,rep,name=lib_witness_list,json=libWitnessList,proto3" json:"lib_witness_list,omitempty"`
	// the pending witness list
	PendingWitnessList []string `protobuf:"bytes,10,rep,name=pending_witness_list,json=pendingWitnessList,proto3" json:"pending_witness_list,omitempty"`
	// the head block time
	HeadBlockTime int64 `protobuf:"varint,11,opt,name=head_block_time,json=headBlockTime,proto3" json:"head_block_time,omitempty"`
	// the last irreversible block time
	LibBlockTime int64 `protobuf:"varint,12,opt,name=lib_block_time,json=libBlockTime,proto3" json:"lib_block_time,omitempty"`
}

func (x *ChainInfoResponse) Reset() {
	*x = ChainInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainInfoResponse) ProtoMessage() {}

func (x *ChainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainInfoResponse.ProtoReflect.Descriptor instead.
func (*ChainInfoResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *ChainInfoResponse) GetNetName() string {
	if x != nil {
		return x.NetName
	}
	return ""
}

func (x *ChainInfoResponse) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *ChainInfoResponse) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ChainInfoResponse) GetHeadBlock() int64 {
	if x != nil {
		return x.HeadBlock
	}
	return 0
}

func (x *ChainInfoResponse) GetHeadBlockHash() string {
	if x != nil {
		return x.HeadBlockHash
	}
	return ""
}

func (x *ChainInfoResponse) GetLibBlock() int64 {
	if x != nil {
		return x.LibBlock
	}
	return 0
}

func (x *ChainInfoResponse) GetLibBlockHash() string {
	if x != nil {
		return x.LibBlockHash
	}
	return ""
}

func (x *ChainInfoResponse) GetWitnessList() []string {
	if x != nil {
		return x.WitnessList
	}
	return nil
}

func (x *ChainInfoResponse) GetLibWitnessList() []string {
	if x != nil {
		return x.LibWitnessList
	}
	return nil
}

func (x *ChainInfoResponse) GetPendingWitnessList() []string {
	if x != nil {
		return x.PendingWitnessList
	}
	return nil
}

func (x *ChainInfoResponse) GetHeadBlockTime() int64 {
	if x != nil {
		return x.HeadBlockTime
	}
	return 0
}

func (x *ChainInfoResponse) GetLibBlockTime() int64 {
	if x != nil {
		return x.LibBlockTime
	}
	return 0
}

// The request message containing the tx's hash.
type TxHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tx hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TxHashRequest) Reset() {
	*x = TxHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxHashRequest) ProtoMessage() {}

func (x *TxHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxHashRequest.ProtoReflect.Descriptor instead.
func (*TxHashRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *TxHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// The request message containing the block's hash.
type GetBlockByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// block hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// complete means whether including the full transactions and transaction receipts
	Complete bool `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (x *GetBlockByHashRequest) Reset() {
	*x = GetBlockByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHashRequest) ProtoMessage() {}

func (x *GetBlockByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByHashRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetBlockByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetBlockByHashRequest) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

// The request message containing the block's number.
type GetBlockByNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// block number
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// complete means whether including the full transactions and transaction receipts
	Complete bool `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (x *GetBlockByNumberRequest) Reset() {
	*x = GetBlockByNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByNumberRequest) ProtoMessage() {}

func (x *GetBlockByNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByNumberRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByNumberRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetBlockByNumberRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetBlockByNumberRequest) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

// The request message containing range start and end
type GetBlockHeaderByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetBlockHeaderByRangeRequest) Reset() {
	*x = GetBlockHeaderByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockHeaderByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeaderByRangeRequest) ProtoMessage() {}

func (x *GetBlockHeaderByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeaderByRangeRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeaderByRangeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *GetBlockHeaderByRangeRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetBlockHeaderByRangeRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// The message defines the account's frozen balance.
type FrozenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// balance amount
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// free time
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *FrozenBalance) Reset() {
	*x = FrozenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrozenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrozenBalance) ProtoMessage() {}

func (x *FrozenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrozenBalance.ProtoReflect.Descriptor instead.
func (*FrozenBalance) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *FrozenBalance) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FrozenBalance) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// The message defines the account's vote info.
type VoteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// option name
	Option string `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	// votes
	Votes float64 `protobuf:"fixed64,2,opt,name=votes,proto3" json:"votes,omitempty"`
	// cleared votes
	ClearedVotes float64 `protobuf:"fixed64,3,opt,name=cleared_votes,json=clearedVotes,proto3" json:"cleared_votes,omitempty"`
}

func (x *VoteInfo) Reset() {
	*x = VoteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteInfo) ProtoMessage() {}

func (x *VoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteInfo.ProtoReflect.Descriptor instead.
func (*VoteInfo) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *VoteInfo) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

func (x *VoteInfo) GetVotes() float64 {
	if x != nil {
		return x.Votes
	}
	return 0
}

func (x *VoteInfo) GetClearedVotes() float64 {
	if x != nil {
		return x.ClearedVotes
	}
	return 0
}

type GetProducerVoteInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account name
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,2,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetProducerVoteInfoRequest) Reset() {
	*x = GetProducerVoteInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProducerVoteInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProducerVoteInfoRequest) ProtoMessage() {}

func (x *GetProducerVoteInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProducerVoteInfoRequest.ProtoReflect.Descriptor instead.
func (*GetProducerVoteInfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *GetProducerVoteInfoRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetProducerVoteInfoRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

type GetProducerVoteInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// producer's public key
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// producer's location
	Loc string `protobuf:"bytes,2,opt,name=loc,proto3" json:"loc,omitempty"`
	// producer's url
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// producer's net id
	NetId string `protobuf:"bytes,4,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// is producer
	IsProducer bool `protobuf:"varint,5,opt,name=is_producer,json=isProducer,proto3" json:"is_producer,omitempty"`
	// is approved
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// is online
	Online bool `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`
	// votes
	Votes float64 `protobuf:"fixed64,8,opt,name=votes,proto3" json:"votes,omitempty"`
}

func (x *GetProducerVoteInfoResponse) Reset() {
	*x = GetProducerVoteInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProducerVoteInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProducerVoteInfoResponse) ProtoMessage() {}

func (x *GetProducerVoteInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProducerVoteInfoResponse.ProtoReflect.Descriptor instead.
func (*GetProducerVoteInfoResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetProducerVoteInfoResponse) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *GetProducerVoteInfoResponse) GetLoc() string {
	if x != nil {
		return x.Loc
	}
	return ""
}

func (x *GetProducerVoteInfoResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetProducerVoteInfoResponse) GetNetId() string {
	if x != nil {
		return x.NetId
	}
	return ""
}

func (x *GetProducerVoteInfoResponse) GetIsProducer() bool {
	if x != nil {
		return x.IsProducer
	}
	return false
}

func (x *GetProducerVoteInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProducerVoteInfoResponse) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *GetProducerVoteInfoResponse) GetVotes() float64 {
	if x != nil {
		return x.Votes
	}
	return 0
}

type GasRatioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lowest gas ratio in head block
	LowestGasRatio float64 `protobuf:"fixed64,1,opt,name=lowest_gas_ratio,json=lowestGasRatio,proto3" json:"lowest_gas_ratio,omitempty"`
	// median gas ratio in head block
	MedianGasRatio float64 `protobuf:"fixed64,2,opt,name=median_gas_ratio,json=medianGasRatio,proto3" json:"median_gas_ratio,omitempty"`
}

func (x *GasRatioResponse) Reset() {
	*x = GasRatioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasRatioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasRatioResponse) ProtoMessage() {}

func (x *GasRatioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasRatioResponse.ProtoReflect.Descriptor instead.
func (*GasRatioResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *GasRatioResponse) GetLowestGasRatio() float64 {
	if x != nil {
		return x.LowestGasRatio
	}
	return 0
}

func (x *GasRatioResponse) GetMedianGasRatio() float64 {
	if x != nil {
		return x.MedianGasRatio
	}
	return 0
}

// The message defines account struct.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// account balance
	Balance float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// gas information
	GasInfo *Account_GasInfo `protobuf:"bytes,3,opt,name=gas_info,json=gasInfo,proto3" json:"gas_info,omitempty"`
	// ram information
	RamInfo *Account_RAMInfo `protobuf:"bytes,4,opt,name=ram_info,json=ramInfo,proto3" json:"ram_info,omitempty"`
	// account permission
	Permissions map[string]*Account_Permission `protobuf:"bytes,5,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// account groups
	Groups map[string]*Account_Group `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// frozen balance information
	FrozenBalances []*FrozenBalance `protobuf:"bytes,7,rep,name=frozen_balances,json=frozenBalances,proto3" json:"frozen_balances,omitempty"`
	// vote information
	VoteInfos []*VoteInfo `protobuf:"bytes,8,rep,name=vote_infos,json=voteInfos,proto3" json:"vote_infos,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Account) GetGasInfo() *Account_GasInfo {
	if x != nil {
		return x.GasInfo
	}
	return nil
}

func (x *Account) GetRamInfo() *Account_RAMInfo {
	if x != nil {
		return x.RamInfo
	}
	return nil
}

func (x *Account) GetPermissions() map[string]*Account_Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Account) GetGroups() map[string]*Account_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Account) GetFrozenBalances() []*FrozenBalance {
	if x != nil {
		return x.FrozenBalances
	}
	return nil
}

func (x *Account) GetVoteInfos() []*VoteInfo {
	if x != nil {
		return x.VoteInfos
	}
	return nil
}

// The message defines the get account request.
type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// get account by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,2,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *GetAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAccountRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines the contract struct.
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// contract code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// contract language
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	// contract version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// original contract code
	OrigCode string `protobuf:"bytes,6,opt,name=orig_code,json=origCode,proto3" json:"orig_code,omitempty"`
	// contract abis
	Abis []*Contract_ABI `protobuf:"bytes,5,rep,name=abis,proto3" json:"abis,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *Contract) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contract) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Contract) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Contract) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Contract) GetOrigCode() string {
	if x != nil {
		return x.OrigCode
	}
	return ""
}

func (x *Contract) GetAbis() []*Contract_ABI {
	if x != nil {
		return x.Abis
	}
	return nil
}

// The message defines the contract vote info
type ContractVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vote information
	VoteInfos []*VoteInfo `protobuf:"bytes,1,rep,name=vote_infos,json=voteInfos,proto3" json:"vote_infos,omitempty"`
}

func (x *ContractVote) Reset() {
	*x = ContractVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractVote) ProtoMessage() {}

func (x *ContractVote) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractVote.ProtoReflect.Descriptor instead.
func (*ContractVote) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *ContractVote) GetVoteInfos() []*VoteInfo {
	if x != nil {
		return x.VoteInfos
	}
	return nil
}

// The message defines get contract request.
type GetContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,2,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetContractRequest) Reset() {
	*x = GetContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRequest) ProtoMessage() {}

func (x *GetContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRequest.ProtoReflect.Descriptor instead.
func (*GetContractRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *GetContractRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetContractRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines get contract storage request.
type GetContractStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the key in the StateDB
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// get the value from StateDB, field is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
	Field string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,4,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetContractStorageRequest) Reset() {
	*x = GetContractStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractStorageRequest) ProtoMessage() {}

func (x *GetContractStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractStorageRequest.ProtoReflect.Descriptor instead.
func (*GetContractStorageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *GetContractStorageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetContractStorageRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetContractStorageRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GetContractStorageRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines get contract storage response.
type GetContractStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the json string data
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// block hash
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// block number
	BlockNumber int64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *GetContractStorageResponse) Reset() {
	*x = GetContractStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractStorageResponse) ProtoMessage() {}

func (x *GetContractStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractStorageResponse.ProtoReflect.Descriptor instead.
func (*GetContractStorageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *GetContractStorageResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GetContractStorageResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetContractStorageResponse) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

// The message defines get batch contract storage request.
type GetBatchContractStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the batch query
	KeyFields []*GetBatchContractStorageRequest_KeyField `protobuf:"bytes,2,rep,name=key_fields,json=keyFields,proto3" json:"key_fields,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,3,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetBatchContractStorageRequest) Reset() {
	*x = GetBatchContractStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchContractStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchContractStorageRequest) ProtoMessage() {}

func (x *GetBatchContractStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchContractStorageRequest.ProtoReflect.Descriptor instead.
func (*GetBatchContractStorageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *GetBatchContractStorageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetBatchContractStorageRequest) GetKeyFields() []*GetBatchContractStorageRequest_KeyField {
	if x != nil {
		return x.KeyFields
	}
	return nil
}

func (x *GetBatchContractStorageRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines get batch contract storage response.
type GetBatchContractStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the repeated json string data
	Datas []string `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	// block hash
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// block number
	BlockNumber int64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *GetBatchContractStorageResponse) Reset() {
	*x = GetBatchContractStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchContractStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchContractStorageResponse) ProtoMessage() {}

func (x *GetBatchContractStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchContractStorageResponse.ProtoReflect.Descriptor instead.
func (*GetBatchContractStorageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *GetBatchContractStorageResponse) GetDatas() []string {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *GetBatchContractStorageResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetBatchContractStorageResponse) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

// The message defines get contract storage request.
type GetContractStorageFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// get the fields from StateDB
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,3,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetContractStorageFieldsRequest) Reset() {
	*x = GetContractStorageFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractStorageFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractStorageFieldsRequest) ProtoMessage() {}

func (x *GetContractStorageFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractStorageFieldsRequest.ProtoReflect.Descriptor instead.
func (*GetContractStorageFieldsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *GetContractStorageFieldsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetContractStorageFieldsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetContractStorageFieldsRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines get contract storage response.
type GetContractStorageFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the fields.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// block hash
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// block number
	BlockNumber int64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *GetContractStorageFieldsResponse) Reset() {
	*x = GetContractStorageFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractStorageFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractStorageFieldsResponse) ProtoMessage() {}

func (x *GetContractStorageFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractStorageFieldsResponse.ProtoReflect.Descriptor instead.
func (*GetContractStorageFieldsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *GetContractStorageFieldsResponse) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetContractStorageFieldsResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetContractStorageFieldsResponse) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type ListContractStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. keys will be in [from, to) and prefixed with `prefix`
	From        string                                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To          string                                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Prefix      string                                 `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	StorageType ListContractStorageRequest_StorageType `protobuf:"varint,5,opt,name=storageType,proto3,enum=rpcpb.ListContractStorageRequest_StorageType" json:"storageType,omitempty"`
	// max count to return. up to 100
	Limit int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,7,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *ListContractStorageRequest) Reset() {
	*x = ListContractStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractStorageRequest) ProtoMessage() {}

func (x *ListContractStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractStorageRequest.ProtoReflect.Descriptor instead.
func (*ListContractStorageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *ListContractStorageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListContractStorageRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListContractStorageRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ListContractStorageRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ListContractStorageRequest) GetStorageType() ListContractStorageRequest_StorageType {
	if x != nil {
		return x.StorageType
	}
	return ListContractStorageRequest_KV
}

func (x *ListContractStorageRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListContractStorageRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

type ListContractStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*ListContractStorageResponse_Data `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	// block hash
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// block number
	BlockNumber int64 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *ListContractStorageResponse) Reset() {
	*x = ListContractStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractStorageResponse) ProtoMessage() {}

func (x *ListContractStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractStorageResponse.ProtoReflect.Descriptor instead.
func (*ListContractStorageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *ListContractStorageResponse) GetDatas() []*ListContractStorageResponse_Data {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *ListContractStorageResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ListContractStorageResponse) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

// The message defines send transaction response.
type SendTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the final transaction hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// the tx_receipt of execution in advance
	PreTxReceipt *TxReceipt `protobuf:"bytes,2,opt,name=pre_tx_receipt,json=preTxReceipt,proto3" json:"pre_tx_receipt,omitempty"`
}

func (x *SendTransactionResponse) Reset() {
	*x = SendTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionResponse) ProtoMessage() {}

func (x *SendTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionResponse.ProtoReflect.Descriptor instead.
func (*SendTransactionResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *SendTransactionResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SendTransactionResponse) GetPreTxReceipt() *TxReceipt {
	if x != nil {
		return x.PreTxReceipt
	}
	return nil
}

// The message defines get token balance response.
type GetTokenBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token balance
	Balance float64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// frozen balance information
	FrozenBalances []*FrozenBalance `protobuf:"bytes,2,rep,name=frozen_balances,json=frozenBalances,proto3" json:"frozen_balances,omitempty"`
}

func (x *GetTokenBalanceResponse) Reset() {
	*x = GetTokenBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenBalanceResponse) ProtoMessage() {}

func (x *GetTokenBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetTokenBalanceResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetTokenBalanceResponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetTokenBalanceResponse) GetFrozenBalances() []*FrozenBalance {
	if x != nil {
		return x.FrozenBalances
	}
	return nil
}

// The message defines get token balance request.
type GetTokenBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account name
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// the token name
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,3,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetTokenBalanceRequest) Reset() {
	*x = GetTokenBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenBalanceRequest) ProtoMessage() {}

func (x *GetTokenBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetTokenBalanceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetTokenBalanceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetTokenBalanceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetTokenBalanceRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines get token721 balance response.
type GetToken721BalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token balance
	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// balance information
	TokenIDs []string `protobuf:"bytes,2,rep,name=tokenIDs,proto3" json:"tokenIDs,omitempty"`
}

func (x *GetToken721BalanceResponse) Reset() {
	*x = GetToken721BalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToken721BalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToken721BalanceResponse) ProtoMessage() {}

func (x *GetToken721BalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToken721BalanceResponse.ProtoReflect.Descriptor instead.
func (*GetToken721BalanceResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetToken721BalanceResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetToken721BalanceResponse) GetTokenIDs() []string {
	if x != nil {
		return x.TokenIDs
	}
	return nil
}

// The message defines get token721 info request.
type GetToken721InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the token name
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// token id
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// get data by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,3,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetToken721InfoRequest) Reset() {
	*x = GetToken721InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToken721InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToken721InfoRequest) ProtoMessage() {}

func (x *GetToken721InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToken721InfoRequest.ProtoReflect.Descriptor instead.
func (*GetToken721InfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetToken721InfoRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetToken721InfoRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *GetToken721InfoRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines get token721 metadata response.
type GetToken721MetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token metadata
	Metadata string `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetToken721MetadataResponse) Reset() {
	*x = GetToken721MetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToken721MetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToken721MetadataResponse) ProtoMessage() {}

func (x *GetToken721MetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToken721MetadataResponse.ProtoReflect.Descriptor instead.
func (*GetToken721MetadataResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *GetToken721MetadataResponse) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// The message defines get token721 owner response.
type GetToken721OwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *GetToken721OwnerResponse) Reset() {
	*x = GetToken721OwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToken721OwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToken721OwnerResponse) ProtoMessage() {}

func (x *GetToken721OwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToken721OwnerResponse.ProtoReflect.Descriptor instead.
func (*GetToken721OwnerResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *GetToken721OwnerResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// The message defines event struct.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event topic
	Topic Event_Topic `protobuf:"varint,1,opt,name=topic,proto3,enum=rpcpb.Event_Topic" json:"topic,omitempty"`
	// event data
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// event time
	Time int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *Event) GetTopic() Event_Topic {
	if x != nil {
		return x.Topic
	}
	return Event_CONTRACT_RECEIPT
}

func (x *Event) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Event) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// The message defines subscribe request.
type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []Event_Topic            `protobuf:"varint,1,rep,packed,name=topics,proto3,enum=rpcpb.Event_Topic" json:"topics,omitempty"`
	Filter *SubscribeRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *SubscribeRequest) GetTopics() []Event_Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *SubscribeRequest) GetFilter() *SubscribeRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// The message defines subscribe response.
type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *SubscribeResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// The message defines the getVoterBonus response.
type VoterBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the totol voter bonus
	Bonus float64 `protobuf:"fixed64,1,opt,name=bonus,proto3" json:"bonus,omitempty"`
	// the voter bonus detail
	Detail map[string]float64 `protobuf:"bytes,2,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *VoterBonus) Reset() {
	*x = VoterBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoterBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoterBonus) ProtoMessage() {}

func (x *VoterBonus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoterBonus.ProtoReflect.Descriptor instead.
func (*VoterBonus) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *VoterBonus) GetBonus() float64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

func (x *VoterBonus) GetDetail() map[string]float64 {
	if x != nil {
		return x.Detail
	}
	return nil
}

// The message defines the getCandidateBonus response.
type CandidateBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the candidate bonus
	Bonus float64 `protobuf:"fixed64,1,opt,name=bonus,proto3" json:"bonus,omitempty"`
}

func (x *CandidateBonus) Reset() {
	*x = CandidateBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandidateBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateBonus) ProtoMessage() {}

func (x *CandidateBonus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateBonus.ProtoReflect.Descriptor instead.
func (*CandidateBonus) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{49}
}

func (x *CandidateBonus) GetBonus() float64 {
	if x != nil {
		return x.Bonus
	}
	return 0
}

// The message defines the get tokeninfo request.
type GetTokenInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token symbol
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// get tokeninfo by longest chain's head block or last irreversible block
	ByLongestChain bool `protobuf:"varint,2,opt,name=by_longest_chain,json=byLongestChain,proto3" json:"by_longest_chain,omitempty"`
}

func (x *GetTokenInfoRequest) Reset() {
	*x = GetTokenInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenInfoRequest) ProtoMessage() {}

func (x *GetTokenInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTokenInfoRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *GetTokenInfoRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTokenInfoRequest) GetByLongestChain() bool {
	if x != nil {
		return x.ByLongestChain
	}
	return false
}

// The message defines the token information.
type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token symbol
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// token full name
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// token issuer
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// the amount of total supply, the result is total_supply_float multiplied by deciaml
	TotalSupply int64 `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	// the amount of current supply, the result is current_supply_float multiplied by deciaml
	CurrentSupply int64 `protobuf:"varint,5,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply,omitempty"`
	// token decimal
	Decimal int32 `protobuf:"varint,6,opt,name=decimal,proto3" json:"decimal,omitempty"`
	// whether the token can be transfered
	CanTransfer bool `protobuf:"varint,7,opt,name=can_transfer,json=canTransfer,proto3" json:"can_transfer,omitempty"`
	// whether the token can only be transfered by issuer
	OnlyIssuerCanTransfer bool `protobuf:"varint,8,opt,name=only_issuer_can_transfer,json=onlyIssuerCanTransfer,proto3" json:"only_issuer_can_transfer,omitempty"`
	// the amount of total supply
	TotalSupplyFloat float64 `protobuf:"fixed64,9,opt,name=total_supply_float,json=totalSupplyFloat,proto3" json:"total_supply_float,omitempty"`
	// the amount of current supply
	CurrentSupplyFloat float64 `protobuf:"fixed64,10,opt,name=current_supply_float,json=currentSupplyFloat,proto3" json:"current_supply_float,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{51}
}

func (x *TokenInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *TokenInfo) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *TokenInfo) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *TokenInfo) GetCurrentSupply() int64 {
	if x != nil {
		return x.CurrentSupply
	}
	return 0
}

func (x *TokenInfo) GetDecimal() int32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *TokenInfo) GetCanTransfer() bool {
	if x != nil {
		return x.CanTransfer
	}
	return false
}

func (x *TokenInfo) GetOnlyIssuerCanTransfer() bool {
	if x != nil {
		return x.OnlyIssuerCanTransfer
	}
	return false
}

func (x *TokenInfo) GetTotalSupplyFloat() float64 {
	if x != nil {
		return x.TotalSupplyFloat
	}
	return 0
}

func (x *TokenInfo) GetCurrentSupplyFloat() float64 {
	if x != nil {
		return x.CurrentSupplyFloat
	}
	return 0
}

type GetBlockTxsByContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBlock  int64  `protobuf:"varint,1,opt,name=from_block,json=fromBlock,proto3" json:"from_block,omitempty"`
	ToBlock    int64  `protobuf:"varint,2,opt,name=to_block,json=toBlock,proto3" json:"to_block,omitempty"`
	Contract   string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	ActionName string `protobuf:"bytes,4,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
}

func (x *GetBlockTxsByContractRequest) Reset() {
	*x = GetBlockTxsByContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockTxsByContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockTxsByContractRequest) ProtoMessage() {}

func (x *GetBlockTxsByContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockTxsByContractRequest.ProtoReflect.Descriptor instead.
func (*GetBlockTxsByContractRequest) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *GetBlockTxsByContractRequest) GetFromBlock() int64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *GetBlockTxsByContractRequest) GetToBlock() int64 {
	if x != nil {
		return x.ToBlock
	}
	return 0
}

func (x *GetBlockTxsByContractRequest) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *GetBlockTxsByContractRequest) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

type BlockTxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// block status
	Status BlockResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=rpcpb.BlockResponse_Status" json:"status,omitempty"`
	// block number
	BlockNumber int64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// transaction
	TxList []*Transaction `protobuf:"bytes,3,rep,name=tx_list,json=txList,proto3" json:"tx_list,omitempty"`
}

func (x *BlockTxs) Reset() {
	*x = BlockTxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTxs) ProtoMessage() {}

func (x *BlockTxs) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTxs.ProtoReflect.Descriptor instead.
func (*BlockTxs) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{53}
}

func (x *BlockTxs) GetStatus() BlockResponse_Status {
	if x != nil {
		return x.Status
	}
	return BlockResponse_PENDING
}

func (x *BlockTxs) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockTxs) GetTxList() []*Transaction {
	if x != nil {
		return x.TxList
	}
	return nil
}

type BlockTxsByContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlocktxList []*BlockTxs `protobuf:"bytes,1,rep,name=blocktx_list,json=blocktxList,proto3" json:"blocktx_list,omitempty"`
}

func (x *BlockTxsByContractResponse) Reset() {
	*x = BlockTxsByContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTxsByContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTxsByContractResponse) ProtoMessage() {}

func (x *BlockTxsByContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTxsByContractResponse.ProtoReflect.Descriptor instead.
func (*BlockTxsByContractResponse) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{54}
}

func (x *BlockTxsByContractResponse) GetBlocktxList() []*BlockTxs {
	if x != nil {
		return x.BlocktxList
	}
	return nil
}

// The message defines transaction execution receipt.
type TxReceipt_Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// function name
	FuncName string `protobuf:"bytes,1,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	// content
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TxReceipt_Receipt) Reset() {
	*x = TxReceipt_Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReceipt_Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReceipt_Receipt) ProtoMessage() {}

func (x *TxReceipt_Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReceipt_Receipt.ProtoReflect.Descriptor instead.
func (*TxReceipt_Receipt) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{6, 1}
}

func (x *TxReceipt_Receipt) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *TxReceipt_Receipt) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// The message defines block extra information
type Block_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pack mode
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// transaction execution thread number
	Thread int32 `protobuf:"varint,2,opt,name=thread,proto3" json:"thread,omitempty"`
	// transaction index of every batch execution
	BatchIndex []int32 `protobuf:"varint,3,rep,packed,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
}

func (x *Block_Info) Reset() {
	*x = Block_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Info) ProtoMessage() {}

func (x *Block_Info) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Info.ProtoReflect.Descriptor instead.
func (*Block_Info) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Block_Info) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Block_Info) GetThread() int32 {
	if x != nil {
		return x.Thread
	}
	return 0
}

func (x *Block_Info) GetBatchIndex() []int32 {
	if x != nil {
		return x.BatchIndex
	}
	return nil
}

// The message defines account pledged coin information.
type Account_PledgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the account who pledges
	Pledger string `protobuf:"bytes,1,opt,name=pledger,proto3" json:"pledger,omitempty"`
	// pledged amount
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Account_PledgeInfo) Reset() {
	*x = Account_PledgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_PledgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_PledgeInfo) ProtoMessage() {}

func (x *Account_PledgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_PledgeInfo.ProtoReflect.Descriptor instead.
func (*Account_PledgeInfo) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25, 0}
}

func (x *Account_PledgeInfo) GetPledger() string {
	if x != nil {
		return x.Pledger
	}
	return ""
}

func (x *Account_PledgeInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// The message defines account gas information.
type Account_GasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current total gas amount
	CurrentTotal    float64 `protobuf:"fixed64,1,opt,name=current_total,json=currentTotal,proto3" json:"current_total,omitempty"`
	TransferableGas float64 `protobuf:"fixed64,2,opt,name=transferable_gas,json=transferableGas,proto3" json:"transferable_gas,omitempty"`
	PledgeGas       float64 `protobuf:"fixed64,3,opt,name=pledge_gas,json=pledgeGas,proto3" json:"pledge_gas,omitempty"`
	// gas increase speed
	IncreaseSpeed float64 `protobuf:"fixed64,4,opt,name=increase_speed,json=increaseSpeed,proto3" json:"increase_speed,omitempty"`
	// gas limit
	Limit float64 `protobuf:"fixed64,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// pledge information
	PledgedInfo []*Account_PledgeInfo `protobuf:"bytes,6,rep,name=pledged_info,json=pledgedInfo,proto3" json:"pledged_info,omitempty"`
}

func (x *Account_GasInfo) Reset() {
	*x = Account_GasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_GasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_GasInfo) ProtoMessage() {}

func (x *Account_GasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_GasInfo.ProtoReflect.Descriptor instead.
func (*Account_GasInfo) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25, 1}
}

func (x *Account_GasInfo) GetCurrentTotal() float64 {
	if x != nil {
		return x.CurrentTotal
	}
	return 0
}

func (x *Account_GasInfo) GetTransferableGas() float64 {
	if x != nil {
		return x.TransferableGas
	}
	return 0
}

func (x *Account_GasInfo) GetPledgeGas() float64 {
	if x != nil {
		return x.PledgeGas
	}
	return 0
}

func (x *Account_GasInfo) GetIncreaseSpeed() float64 {
	if x != nil {
		return x.IncreaseSpeed
	}
	return 0
}

func (x *Account_GasInfo) GetLimit() float64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Account_GasInfo) GetPledgedInfo() []*Account_PledgeInfo {
	if x != nil {
		return x.PledgedInfo
	}
	return nil
}

// The message defines account ram information.
type Account_RAMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// available ram bytes
	Available int64 `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// used ram bytes
	Used int64 `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`
	// total ram bytes
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Account_RAMInfo) Reset() {
	*x = Account_RAMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_RAMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_RAMInfo) ProtoMessage() {}

func (x *Account_RAMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_RAMInfo.ProtoReflect.Descriptor instead.
func (*Account_RAMInfo) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25, 2}
}

func (x *Account_RAMInfo) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Account_RAMInfo) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Account_RAMInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// The message defines permission item.
type Account_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission name or key pair id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// whether it's a key pair
	IsKeyPair bool `protobuf:"varint,2,opt,name=is_key_pair,json=isKeyPair,proto3" json:"is_key_pair,omitempty"`
	// permission weight
	Weight int64 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	// permission
	Permission string `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *Account_Item) Reset() {
	*x = Account_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_Item) ProtoMessage() {}

func (x *Account_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_Item.ProtoReflect.Descriptor instead.
func (*Account_Item) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25, 3}
}

func (x *Account_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account_Item) GetIsKeyPair() bool {
	if x != nil {
		return x.IsKeyPair
	}
	return false
}

func (x *Account_Item) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Account_Item) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

// The message defines a permission group.
type Account_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// permission items
	Items []*Account_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Account_Group) Reset() {
	*x = Account_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_Group) ProtoMessage() {}

func (x *Account_Group) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_Group.ProtoReflect.Descriptor instead.
func (*Account_Group) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25, 4}
}

func (x *Account_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account_Group) GetItems() []*Account_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// The message defines the permission struct.
type Account_Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permission name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// permission groups
	GroupNames []string `protobuf:"bytes,2,rep,name=group_names,json=groupNames,proto3" json:"group_names,omitempty"`
	// permission items
	Items []*Account_Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// permission threshold
	Threshold int64 `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Account_Permission) Reset() {
	*x = Account_Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_Permission) ProtoMessage() {}

func (x *Account_Permission) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_Permission.ProtoReflect.Descriptor instead.
func (*Account_Permission) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{25, 5}
}

func (x *Account_Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account_Permission) GetGroupNames() []string {
	if x != nil {
		return x.GroupNames
	}
	return nil
}

func (x *Account_Permission) GetItems() []*Account_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Account_Permission) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// The message defines the ABI struct.
type Contract_ABI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// abi name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// abi arguments
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// abi amount limt
	AmountLimit []*AmountLimit `protobuf:"bytes,3,rep,name=amount_limit,json=amountLimit,proto3" json:"amount_limit,omitempty"`
}

func (x *Contract_ABI) Reset() {
	*x = Contract_ABI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ABI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ABI) ProtoMessage() {}

func (x *Contract_ABI) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ABI.ProtoReflect.Descriptor instead.
func (*Contract_ABI) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{27, 0}
}

func (x *Contract_ABI) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contract_ABI) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Contract_ABI) GetAmountLimit() []*AmountLimit {
	if x != nil {
		return x.AmountLimit
	}
	return nil
}

// The message defines GetContractStorage request params.
type GetBatchContractStorageRequest_KeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key in StateDB
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// get the value from StateDB, fields is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *GetBatchContractStorageRequest_KeyField) Reset() {
	*x = GetBatchContractStorageRequest_KeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchContractStorageRequest_KeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchContractStorageRequest_KeyField) ProtoMessage() {}

func (x *GetBatchContractStorageRequest_KeyField) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchContractStorageRequest_KeyField.ProtoReflect.Descriptor instead.
func (*GetBatchContractStorageRequest_KeyField) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{32, 0}
}

func (x *GetBatchContractStorageRequest_KeyField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetBatchContractStorageRequest_KeyField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type ListContractStorageResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key in StateDB
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// the value from StateDB
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ListContractStorageResponse_Data) Reset() {
	*x = ListContractStorageResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractStorageResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractStorageResponse_Data) ProtoMessage() {}

func (x *ListContractStorageResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractStorageResponse_Data.ProtoReflect.Descriptor instead.
func (*ListContractStorageResponse_Data) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{37, 0}
}

func (x *ListContractStorageResponse_Data) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListContractStorageResponse_Data) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SubscribeRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id
	ContractId string `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
}

func (x *SubscribeRequest_Filter) Reset() {
	*x = SubscribeRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_pb_rpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_Filter) ProtoMessage() {}

func (x *SubscribeRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_pb_rpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_Filter.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_Filter) Descriptor() ([]byte, []int) {
	return file_rpc_pb_rpc_proto_rawDescGZIP(), []int{46, 0}
}

func (x *SubscribeRequest_Filter) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

var File_rpc_pb_rpc_proto protoreflect.FileDescriptor

var file_rpc_pb_rpc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x72, 0x70, 0x63, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2f, 0x70, 0x62, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3c, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x52, 0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x64, 0x52, 0x61, 0x6d, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xd2, 0x01,
	0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x04, 0x0a, 0x09, 0x54, 0x78, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x2e, 0x52, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xb7, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x41, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f,
	0x55, 0x47, 0x48, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x55,
	0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x52,
	0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x22, 0xaa, 0x03, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x78, 0x12,
	0x35, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x09, 0x74, 0x78,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x52, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x34, 0x0a,
	0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x32,
	0x35, 0x36, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x10, 0x02, 0x22, 0xb6, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x73, 0x22, 0x80, 0x04, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x78, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x74,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x78, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x53, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x91, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x27, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x52, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x27, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x52, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x4b, 0x0a, 0x1a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcb, 0x03, 0x0a,
	0x11, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x69, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x62, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x69, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69, 0x62, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x62, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69,
	0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0x3b, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x08,
	0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62,
	0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xd7, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x47, 0x61, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x47, 0x61, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x47, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0xfd, 0x09, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52,
	0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x3e, 0x0a, 0x0a, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xf3, 0x01, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x47, 0x61, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a,
	0x0c, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x51, 0x0a, 0x07, 0x52,
	0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x6e,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x46,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x1a, 0x59, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f,
	0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x62, 0x69, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x42, 0x49, 0x52, 0x04, 0x61, 0x62, 0x69, 0x73, 0x1a,
	0x64, 0x0a, 0x03, 0x41, 0x42, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x35,
	0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x22, 0x72, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x1a, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x7c, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x99, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4f, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79,
	0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x1e, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4b,
	0x56, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x50, 0x10, 0x01, 0x22, 0xce, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x2e, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a,
	0x17, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x54, 0x78, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x22, 0x72, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79,
	0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x52, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x73,
	0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x37, 0x32, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x31,
	0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x29, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x57, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6f, 0x6e, 0x6c, 0x79,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78,
	0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x1a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xde, 0x1a,
	0x0a, 0x0a, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x54, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x41, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x52, 0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x41,
	0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x67, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x2f, 0x7b, 0x68, 0x61,
	0x73, 0x68, 0x7d, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x67, 0x65,
	0x74, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x2f, 0x7b, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x2f, 0x7b, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x7d, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x67,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x2f, 0x7b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x23, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f,
	0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x37, 0x32, 0x31, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x37, 0x32, 0x31, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7d, 0x2f, 0x7b, 0x62, 0x79,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12,
	0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7d,
	0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12, 0x93,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x67, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x37, 0x32, 0x31, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x2f, 0x7b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x7d, 0x12, 0x51, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x73, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x47, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x67, 0x65, 0x74, 0x47,
	0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x97, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x2f, 0x7b,
	0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x7d, 0x12, 0x67, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12, 0x73, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x30, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x62, 0x79,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12,
	0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x22, 0x13, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x67, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x22, 0x14, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a,
	0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0c, 0x22, 0x07, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x78, 0x3a, 0x01, 0x2a, 0x12,
	0x52, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22,
	0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x22, 0x07, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x54, 0x78,
	0x3a, 0x01, 0x2a, 0x12, 0x57, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12, 0x7a, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x12, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x67, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12, 0x6f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x7d, 0x2f, 0x7b, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78,
	0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x2f,
	0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x73,
	0x74, 0x2d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x2f, 0x67, 0x6f, 0x2d, 0x69, 0x6f,
	0x73, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_pb_rpc_proto_rawDescOnce sync.Once
	file_rpc_pb_rpc_proto_rawDescData = file_rpc_pb_rpc_proto_rawDesc
)

func file_rpc_pb_rpc_proto_rawDescGZIP() []byte {
	file_rpc_pb_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_pb_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_pb_rpc_proto_rawDescData)
	})
	return file_rpc_pb_rpc_proto_rawDescData
}

var file_rpc_pb_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_rpc_pb_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_rpc_pb_rpc_proto_goTypes = []interface{}{
	(TxReceipt_StatusCode)(0),                       // 0: rpcpb.TxReceipt.StatusCode
	(TransactionResponse_Status)(0),                 // 1: rpcpb.TransactionResponse.Status
	(Signature_Algorithm)(0),                        // 2: rpcpb.Signature.Algorithm
	(BlockResponse_Status)(0),                       // 3: rpcpb.BlockResponse.Status
	(RawBlockResponse_Status)(0),                    // 4: rpcpb.RawBlockResponse.Status
	(ListContractStorageRequest_StorageType)(0),     // 5: rpcpb.ListContractStorageRequest.StorageType
	(Event_Topic)(0),                                // 6: rpcpb.Event.Topic
	(*EmptyRequest)(nil),                            // 7: rpcpb.EmptyRequest
	(*NetworkInfo)(nil),                             // 8: rpcpb.NetworkInfo
	(*RAMInfoResponse)(nil),                         // 9: rpcpb.RAMInfoResponse
	(*NodeInfoResponse)(nil),                        // 10: rpcpb.NodeInfoResponse
	(*AmountLimit)(nil),                             // 11: rpcpb.AmountLimit
	(*Action)(nil),                                  // 12: rpcpb.Action
	(*TxReceipt)(nil),                               // 13: rpcpb.TxReceipt
	(*Transaction)(nil),                             // 14: rpcpb.Transaction
	(*TransactionResponse)(nil),                     // 15: rpcpb.TransactionResponse
	(*Signature)(nil),                               // 16: rpcpb.Signature
	(*TransactionRequest)(nil),                      // 17: rpcpb.TransactionRequest
	(*Block)(nil),                                   // 18: rpcpb.Block
	(*BlockResponse)(nil),                           // 19: rpcpb.BlockResponse
	(*RawBlockResponse)(nil),                        // 20: rpcpb.RawBlockResponse
	(*BlockHeaderByRangeResponse)(nil),              // 21: rpcpb.BlockHeaderByRangeResponse
	(*ChainInfoResponse)(nil),                       // 22: rpcpb.ChainInfoResponse
	(*TxHashRequest)(nil),                           // 23: rpcpb.TxHashRequest
	(*GetBlockByHashRequest)(nil),                   // 24: rpcpb.GetBlockByHashRequest
	(*GetBlockByNumberRequest)(nil),                 // 25: rpcpb.GetBlockByNumberRequest
	(*GetBlockHeaderByRangeRequest)(nil),            // 26: rpcpb.GetBlockHeaderByRangeRequest
	(*FrozenBalance)(nil),                           // 27: rpcpb.FrozenBalance
	(*VoteInfo)(nil),                                // 28: rpcpb.VoteInfo
	(*GetProducerVoteInfoRequest)(nil),              // 29: rpcpb.GetProducerVoteInfoRequest
	(*GetProducerVoteInfoResponse)(nil),             // 30: rpcpb.GetProducerVoteInfoResponse
	(*GasRatioResponse)(nil),                        // 31: rpcpb.GasRatioResponse
	(*Account)(nil),                                 // 32: rpcpb.Account
	(*GetAccountRequest)(nil),                       // 33: rpcpb.GetAccountRequest
	(*Contract)(nil),                                // 34: rpcpb.Contract
	(*ContractVote)(nil),                            // 35: rpcpb.ContractVote
	(*GetContractRequest)(nil),                      // 36: rpcpb.GetContractRequest
	(*GetContractStorageRequest)(nil),               // 37: rpcpb.GetContractStorageRequest
	(*GetContractStorageResponse)(nil),              // 38: rpcpb.GetContractStorageResponse
	(*GetBatchContractStorageRequest)(nil),          // 39: rpcpb.GetBatchContractStorageRequest
	(*GetBatchContractStorageResponse)(nil),         // 40: rpcpb.GetBatchContractStorageResponse
	(*GetContractStorageFieldsRequest)(nil),         // 41: rpcpb.GetContractStorageFieldsRequest
	(*GetContractStorageFieldsResponse)(nil),        // 42: rpcpb.GetContractStorageFieldsResponse
	(*ListContractStorageRequest)(nil),              // 43: rpcpb.ListContractStorageRequest
	(*ListContractStorageResponse)(nil),             // 44: rpcpb.ListContractStorageResponse
	(*SendTransactionResponse)(nil),                 // 45: rpcpb.SendTransactionResponse
	(*GetTokenBalanceResponse)(nil),                 // 46: rpcpb.GetTokenBalanceResponse
	(*GetTokenBalanceRequest)(nil),                  // 47: rpcpb.GetTokenBalanceRequest
	(*GetToken721BalanceResponse)(nil),              // 48: rpcpb.GetToken721BalanceResponse
	(*GetToken721InfoRequest)(nil),                  // 49: rpcpb.GetToken721InfoRequest
	(*GetToken721MetadataResponse)(nil),             // 50: rpcpb.GetToken721MetadataResponse
	(*GetToken721OwnerResponse)(nil),                // 51: rpcpb.GetToken721OwnerResponse
	(*Event)(nil),                                   // 52: rpcpb.Event
	(*SubscribeRequest)(nil),                        // 53: rpcpb.SubscribeRequest
	(*SubscribeResponse)(nil),                       // 54: rpcpb.SubscribeResponse
	(*VoterBonus)(nil),                              // 55: rpcpb.VoterBonus
	(*CandidateBonus)(nil),                          // 56: rpcpb.CandidateBonus
	(*GetTokenInfoRequest)(nil),                     // 57: rpcpb.GetTokenInfoRequest
	(*TokenInfo)(nil),                               // 58: rpcpb.TokenInfo
	(*GetBlockTxsByContractRequest)(nil),            // 59: rpcpb.GetBlockTxsByContractRequest
	(*BlockTxs)(nil),                                // 60: rpcpb.BlockTxs
	(*BlockTxsByContractResponse)(nil),              // 61: rpcpb.BlockTxsByContractResponse
	nil,                                             // 62: rpcpb.TxReceipt.RamUsageEntry
	(*TxReceipt_Receipt)(nil),                       // 63: rpcpb.TxReceipt.Receipt
	(*Block_Info)(nil),                              // 64: rpcpb.Block.Info
	(*Account_PledgeInfo)(nil),                      // 65: rpcpb.Account.PledgeInfo
	(*Account_GasInfo)(nil),                         // 66: rpcpb.Account.GasInfo
	(*Account_RAMInfo)(nil),                         // 67: rpcpb.Account.RAMInfo
	(*Account_Item)(nil),                            // 68: rpcpb.Account.Item
	(*Account_Group)(nil),                           // 69: rpcpb.Account.Group
	(*Account_Permission)(nil),                      // 70: rpcpb.Account.Permission
	nil,                                             // 71: rpcpb.Account.PermissionsEntry
	nil,                                             // 72: rpcpb.Account.GroupsEntry
	(*Contract_ABI)(nil),                            // 73: rpcpb.Contract.ABI
	(*GetBatchContractStorageRequest_KeyField)(nil), // 74: rpcpb.GetBatchContractStorageRequest.KeyField
	(*ListContractStorageResponse_Data)(nil),        // 75: rpcpb.ListContractStorageResponse.Data
	(*SubscribeRequest_Filter)(nil),                 // 76: rpcpb.SubscribeRequest.Filter
	nil,                                             // 77: rpcpb.VoterBonus.DetailEntry
	(*pb.Block)(nil),                                // 78: blockpb.Block
}
var file_rpc_pb_rpc_proto_depIdxs = []int32{
	8,  // 0: rpcpb.NodeInfoResponse.network:type_name -> rpcpb.NetworkInfo
	62, // 1: rpcpb.TxReceipt.ram_usage:type_name -> rpcpb.TxReceipt.RamUsageEntry
	0,  // 2: rpcpb.TxReceipt.status_code:type_name -> rpcpb.TxReceipt.StatusCode
	63, // 3: rpcpb.TxReceipt.receipts:type_name -> rpcpb.TxReceipt.Receipt
	12, // 4: rpcpb.Transaction.actions:type_name -> rpcpb.Action
	11, // 5: rpcpb.Transaction.amount_limit:type_name -> rpcpb.AmountLimit
	13, // 6: rpcpb.Transaction.tx_receipt:type_name -> rpcpb.TxReceipt
	1,  // 7: rpcpb.TransactionResponse.status:type_name -> rpcpb.TransactionResponse.Status
	14, // 8: rpcpb.TransactionResponse.transaction:type_name -> rpcpb.Transaction
	2,  // 9: rpcpb.Signature.algorithm:type_name -> rpcpb.Signature.Algorithm
	12, // 10: rpcpb.TransactionRequest.actions:type_name -> rpcpb.Action
	11, // 11: rpcpb.TransactionRequest.amount_limit:type_name -> rpcpb.AmountLimit
	16, // 12: rpcpb.TransactionRequest.signatures:type_name -> rpcpb.Signature
	16, // 13: rpcpb.TransactionRequest.publisher_sigs:type_name -> rpcpb.Signature
	64, // 14: rpcpb.Block.info:type_name -> rpcpb.Block.Info
	14, // 15: rpcpb.Block.transactions:type_name -> rpcpb.Transaction
	3,  // 16: rpcpb.BlockResponse.status:type_name -> rpcpb.BlockResponse.Status
	18, // 17: rpcpb.BlockResponse.block:type_name -> rpcpb.Block
	4,  // 18: rpcpb.RawBlockResponse.status:type_name -> rpcpb.RawBlockResponse.Status
	78, // 19: rpcpb.RawBlockResponse.block:type_name -> blockpb.Block
	78, // 20: rpcpb.BlockHeaderByRangeResponse.block_list:type_name -> blockpb.Block
	66, // 21: rpcpb.Account.gas_info:type_name -> rpcpb.Account.GasInfo
	67, // 22: rpcpb.Account.ram_info:type_name -> rpcpb.Account.RAMInfo
	71, // 23: rpcpb.Account.permissions:type_name -> rpcpb.Account.PermissionsEntry
	72, // 24: rpcpb.Account.groups:type_name -> rpcpb.Account.GroupsEntry
	27, // 25: rpcpb.Account.frozen_balances:type_name -> rpcpb.FrozenBalance
	28, // 26: rpcpb.Account.vote_infos:type_name -> rpcpb.VoteInfo
	73, // 27: rpcpb.Contract.abis:type_name -> rpcpb.Contract.ABI
	28, // 28: rpcpb.ContractVote.vote_infos:type_name -> rpcpb.VoteInfo
	74, // 29: rpcpb.GetBatchContractStorageRequest.key_fields:type_name -> rpcpb.GetBatchContractStorageRequest.KeyField
	5,  // 30: rpcpb.ListContractStorageRequest.storageType:type_name -> rpcpb.ListContractStorageRequest.StorageType
	75, // 31: rpcpb.ListContractStorageResponse.datas:type_name -> rpcpb.ListContractStorageResponse.Data
	13, // 32: rpcpb.SendTransactionResponse.pre_tx_receipt:type_name -> rpcpb.TxReceipt
	27, // 33: rpcpb.GetTokenBalanceResponse.frozen_balances:type_name -> rpcpb.FrozenBalance
	6,  // 34: rpcpb.Event.topic:type_name -> rpcpb.Event.Topic
	6,  // 35: rpcpb.SubscribeRequest.topics:type_name -> rpcpb.Event.Topic
	76, // 36: rpcpb.SubscribeRequest.filter:type_name -> rpcpb.SubscribeRequest.Filter
	52, // 37: rpcpb.SubscribeResponse.event:type_name -> rpcpb.Event
	77, // 38: rpcpb.VoterBonus.detail:type_name -> rpcpb.VoterBonus.DetailEntry
	3,  // 39: rpcpb.BlockTxs.status:type_name -> rpcpb.BlockResponse.Status
	14, // 40: rpcpb.BlockTxs.tx_list:type_name -> rpcpb.Transaction
	60, // 41: rpcpb.BlockTxsByContractResponse.blocktx_list:type_name -> rpcpb.BlockTxs
	65, // 42: rpcpb.Account.GasInfo.pledged_info:type_name -> rpcpb.Account.PledgeInfo
	68, // 43: rpcpb.Account.Group.items:type_name -> rpcpb.Account.Item
	68, // 44: rpcpb.Account.Permission.items:type_name -> rpcpb.Account.Item
	70, // 45: rpcpb.Account.PermissionsEntry.value:type_name -> rpcpb.Account.Permission
	69, // 46: rpcpb.Account.GroupsEntry.value:type_name -> rpcpb.Account.Group
	11, // 47: rpcpb.Contract.ABI.amount_limit:type_name -> rpcpb.AmountLimit
	7,  // 48: rpcpb.ApiService.GetNodeInfo:input_type -> rpcpb.EmptyRequest
	7,  // 49: rpcpb.ApiService.GetChainInfo:input_type -> rpcpb.EmptyRequest
	7,  // 50: rpcpb.ApiService.GetRAMInfo:input_type -> rpcpb.EmptyRequest
	23, // 51: rpcpb.ApiService.GetTxByHash:input_type -> rpcpb.TxHashRequest
	23, // 52: rpcpb.ApiService.GetTxReceiptByTxHash:input_type -> rpcpb.TxHashRequest
	24, // 53: rpcpb.ApiService.GetBlockByHash:input_type -> rpcpb.GetBlockByHashRequest
	25, // 54: rpcpb.ApiService.GetBlockByNumber:input_type -> rpcpb.GetBlockByNumberRequest
	25, // 55: rpcpb.ApiService.GetRawBlockByNumber:input_type -> rpcpb.GetBlockByNumberRequest
	26, // 56: rpcpb.ApiService.GetBlockHeaderByRange:input_type -> rpcpb.GetBlockHeaderByRangeRequest
	33, // 57: rpcpb.ApiService.GetAccount:input_type -> rpcpb.GetAccountRequest
	47, // 58: rpcpb.ApiService.GetTokenBalance:input_type -> rpcpb.GetTokenBalanceRequest
	47, // 59: rpcpb.ApiService.GetToken721Balance:input_type -> rpcpb.GetTokenBalanceRequest
	49, // 60: rpcpb.ApiService.GetToken721Metadata:input_type -> rpcpb.GetToken721InfoRequest
	49, // 61: rpcpb.ApiService.GetToken721Owner:input_type -> rpcpb.GetToken721InfoRequest
	7,  // 62: rpcpb.ApiService.GetGasRatio:input_type -> rpcpb.EmptyRequest
	29, // 63: rpcpb.ApiService.GetProducerVoteInfo:input_type -> rpcpb.GetProducerVoteInfoRequest
	36, // 64: rpcpb.ApiService.GetContract:input_type -> rpcpb.GetContractRequest
	36, // 65: rpcpb.ApiService.GetContractVote:input_type -> rpcpb.GetContractRequest
	37, // 66: rpcpb.ApiService.GetContractStorage:input_type -> rpcpb.GetContractStorageRequest
	39, // 67: rpcpb.ApiService.GetBatchContractStorage:input_type -> rpcpb.GetBatchContractStorageRequest
	43, // 68: rpcpb.ApiService.ListContractStorage:input_type -> rpcpb.ListContractStorageRequest
	41, // 69: rpcpb.ApiService.GetContractStorageFields:input_type -> rpcpb.GetContractStorageFieldsRequest
	17, // 70: rpcpb.ApiService.SendTransaction:input_type -> rpcpb.TransactionRequest
	17, // 71: rpcpb.ApiService.ExecTransaction:input_type -> rpcpb.TransactionRequest
	53, // 72: rpcpb.ApiService.Subscribe:input_type -> rpcpb.SubscribeRequest
	33, // 73: rpcpb.ApiService.GetVoterBonus:input_type -> rpcpb.GetAccountRequest
	33, // 74: rpcpb.ApiService.GetCandidateBonus:input_type -> rpcpb.GetAccountRequest
	57, // 75: rpcpb.ApiService.GetTokenInfo:input_type -> rpcpb.GetTokenInfoRequest
	59, // 76: rpcpb.ApiService.GetBlockTxsByContract:input_type -> rpcpb.GetBlockTxsByContractRequest
	10, // 77: rpcpb.ApiService.GetNodeInfo:output_type -> rpcpb.NodeInfoResponse
	22, // 78: rpcpb.ApiService.GetChainInfo:output_type -> rpcpb.ChainInfoResponse
	9,  // 79: rpcpb.ApiService.GetRAMInfo:output_type -> rpcpb.RAMInfoResponse
	15, // 80: rpcpb.ApiService.GetTxByHash:output_type -> rpcpb.TransactionResponse
	13, // 81: rpcpb.ApiService.GetTxReceiptByTxHash:output_type -> rpcpb.TxReceipt
	19, // 82: rpcpb.ApiService.GetBlockByHash:output_type -> rpcpb.BlockResponse
	19, // 83: rpcpb.ApiService.GetBlockByNumber:output_type -> rpcpb.BlockResponse
	20, // 84: rpcpb.ApiService.GetRawBlockByNumber:output_type -> rpcpb.RawBlockResponse
	21, // 85: rpcpb.ApiService.GetBlockHeaderByRange:output_type -> rpcpb.BlockHeaderByRangeResponse
	32, // 86: rpcpb.ApiService.GetAccount:output_type -> rpcpb.Account
	46, // 87: rpcpb.ApiService.GetTokenBalance:output_type -> rpcpb.GetTokenBalanceResponse
	48, // 88: rpcpb.ApiService.GetToken721Balance:output_type -> rpcpb.GetToken721BalanceResponse
	50, // 89: rpcpb.ApiService.GetToken721Metadata:output_type -> rpcpb.GetToken721MetadataResponse
	51, // 90: rpcpb.ApiService.GetToken721Owner:output_type -> rpcpb.GetToken721OwnerResponse
	31, // 91: rpcpb.ApiService.GetGasRatio:output_type -> rpcpb.GasRatioResponse
	30, // 92: rpcpb.ApiService.GetProducerVoteInfo:output_type -> rpcpb.GetProducerVoteInfoResponse
	34, // 93: rpcpb.ApiService.GetContract:output_type -> rpcpb.Contract
	35, // 94: rpcpb.ApiService.GetContractVote:output_type -> rpcpb.ContractVote
	38, // 95: rpcpb.ApiService.GetContractStorage:output_type -> rpcpb.GetContractStorageResponse
	40, // 96: rpcpb.ApiService.GetBatchContractStorage:output_type -> rpcpb.GetBatchContractStorageResponse
	44, // 97: rpcpb.ApiService.ListContractStorage:output_type -> rpcpb.ListContractStorageResponse
	42, // 98: rpcpb.ApiService.GetContractStorageFields:output_type -> rpcpb.GetContractStorageFieldsResponse
	45, // 99: rpcpb.ApiService.SendTransaction:output_type -> rpcpb.SendTransactionResponse
	13, // 100: rpcpb.ApiService.ExecTransaction:output_type -> rpcpb.TxReceipt
	54, // 101: rpcpb.ApiService.Subscribe:output_type -> rpcpb.SubscribeResponse
	55, // 102: rpcpb.ApiService.GetVoterBonus:output_type -> rpcpb.VoterBonus
	56, // 103: rpcpb.ApiService.GetCandidateBonus:output_type -> rpcpb.CandidateBonus
	58, // 104: rpcpb.ApiService.GetTokenInfo:output_type -> rpcpb.TokenInfo
	61, // 105: rpcpb.ApiService.GetBlockTxsByContract:output_type -> rpcpb.BlockTxsByContractResponse
	77, // [77:106] is the sub-list for method output_type
	48, // [48:77] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_rpc_pb_rpc_proto_init() }
func file_rpc_pb_rpc_proto_init() {
	if File_rpc_pb_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_pb_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RAMInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeaderByRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockHeaderByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrozenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProducerVoteInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProducerVoteInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasRatioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchContractStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchContractStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractStorageFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractStorageFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToken721BalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToken721InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToken721MetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToken721OwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoterBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandidateBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockTxsByContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTxsByContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReceipt_Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_PledgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_GasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_RAMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ABI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchContractStorageRequest_KeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractStorageResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_pb_rpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_pb_rpc_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_pb_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_pb_rpc_proto_depIdxs,
		EnumInfos:         file_rpc_pb_rpc_proto_enumTypes,
		MessageInfos:      file_rpc_pb_rpc_proto_msgTypes,
	}.Build()
	File_rpc_pb_rpc_proto = out.File
	file_rpc_pb_rpc_proto_rawDesc = nil
	file_rpc_pb_rpc_proto_goTypes = nil
	file_rpc_pb_rpc_proto_depIdxs = nil
}
