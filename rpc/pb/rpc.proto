syntax = "proto3";

package rpcpb;

import "google/api/annotations.proto";
import "core/block/pb/block.proto";
option go_package = "github.com/iost-official/go-iost/v3/rpc/rpcpb";

service ApiService {
    // get the node information
    rpc GetNodeInfo (EmptyRequest) returns (NodeInfoResponse) {
        option (google.api.http) = {
            get: "/getNodeInfo"
        };
    }

    // get blockchain information
    rpc GetChainInfo (EmptyRequest) returns (ChainInfoResponse) {
        option (google.api.http) = {
            get: "/getChainInfo"
        };
    }

    // get current blockchain ram information
    rpc GetRAMInfo (EmptyRequest) returns (RAMInfoResponse) {
        option (google.api.http) = {
            get: "/getRAMInfo"
        };
    }

    // get transaction by hash
    rpc GetTxByHash (TxHashRequest) returns (TransactionResponse) {
        option (google.api.http) = {
            get: "/getTxByHash/{hash}"
        };
    }

    // get transaction receipt by transaction hash
    rpc GetTxReceiptByTxHash (TxHashRequest) returns (TxReceipt) {
        option (google.api.http) = {
            get: "/getTxReceiptByTxHash/{hash}"
        };
    }

    // get block by hash
    rpc GetBlockByHash (GetBlockByHashRequest) returns (BlockResponse) {
        option (google.api.http) = {
            get: "/getBlockByHash/{hash}/{complete}"
        };
    }

    // get block by number
    rpc GetBlockByNumber (GetBlockByNumberRequest) returns (BlockResponse) {
        option (google.api.http) = {
            get: "/getBlockByNumber/{number}/{complete}"
        };
    }
    // get raw block by number, including block signature etc
    rpc GetRawBlockByNumber (GetBlockByNumberRequest) returns (RawBlockResponse) {
        option (google.api.http) = {
            get: "/getRawBlockByNumber/{number}/{complete}"
        };
    }
    // get batch of block header
    rpc GetBlockHeaderByRange (GetBlockHeaderByRangeRequest) returns (BlockHeaderByRangeResponse) {
        option (google.api.http) = {
            post: "/getBlockHeaderByRange"
            body: "*"
        };
    }

    // get account
    rpc GetAccount (GetAccountRequest) returns (Account) {
        option (google.api.http) = {
            get: "/getAccount/{name}/{by_longest_chain}"
        };
    }

    // get token balance
    rpc GetTokenBalance (GetTokenBalanceRequest) returns (GetTokenBalanceResponse) {
        option (google.api.http) = {
            get: "/getTokenBalance/{account}/{token}/{by_longest_chain}"
        };
    }

    // get token721 balance
    rpc GetToken721Balance (GetTokenBalanceRequest) returns (GetToken721BalanceResponse) {
        option (google.api.http) = {
            get: "/getToken721Balance/{account}/{token}/{by_longest_chain}"
        };
    }
    // get token721 metadata
    rpc GetToken721Metadata (GetToken721InfoRequest) returns (GetToken721MetadataResponse) {
        option (google.api.http) = {
            get: "/getToken721Metadata/{token}/{token_id}/{by_longest_chain}"
        };
    }
    // get token721 owner
    rpc GetToken721Owner (GetToken721InfoRequest) returns (GetToken721OwnerResponse) {
        option (google.api.http) = {
            get: "/getToken721Owner/{token}/{token_id}/{by_longest_chain}"
        };
    }
    // get gas ratio infomation
    rpc GetGasRatio (EmptyRequest) returns (GasRatioResponse) {
        option (google.api.http) = {
            get: "/getGasRatio"
        };
    }

    // get producer vote infomation
    rpc GetProducerVoteInfo (GetProducerVoteInfoRequest) returns (GetProducerVoteInfoResponse) {
        option (google.api.http) = {
            get: "/getProducerVoteInfo/{account}/{by_longest_chain}"
        };
    }

    // get contract
    rpc GetContract (GetContractRequest) returns (Contract) {
        option (google.api.http) = {
            get: "/getContract/{id}/{by_longest_chain}"
        };
    }

    // get contract vote
    rpc GetContractVote (GetContractRequest) returns (ContractVote) {
        option (google.api.http) = {
            get: "/getContractVote/{id}/{by_longest_chain}"
        };
    }

    // get contract storage
    rpc GetContractStorage (GetContractStorageRequest) returns (GetContractStorageResponse) {
        option (google.api.http) = {
            post: "/getContractStorage"
            body: "*"
        };
    }

    // get batch contract storage
    rpc GetBatchContractStorage (GetBatchContractStorageRequest) returns (GetBatchContractStorageResponse) {
        option (google.api.http) = {
            post: "/getBatchContractStorage"
            body: "*"
        };
    }

    rpc ListContractStorage (ListContractStorageRequest) returns (ListContractStorageResponse) {
        option (google.api.http) = {
            post: "/listContractStorage"
            body: "*"
        };
    }

    // get contract fields storage
    rpc GetContractStorageFields (GetContractStorageFieldsRequest) returns (GetContractStorageFieldsResponse) {
        option (google.api.http) = {
            post: "/getContractStorageFields"
            body: "*"
        };
    }

    // send transaction
    rpc SendTransaction (TransactionRequest) returns (SendTransactionResponse) {
        option (google.api.http) = {
            post: "/sendTx"
            body: "*"
        };
    }

    // execute transaction
    rpc ExecTransaction (TransactionRequest) returns (TxReceipt) {
        option (google.api.http) = {
            post: "/execTx"
            body: "*"
        };
    }

    // subscribe an event
    rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {
        option (google.api.http) = {
            post: "/subscribe"
            body: "*"
        };
    }

    rpc GetVoterBonus (GetAccountRequest) returns (VoterBonus) {
        option (google.api.http) = {
            get: "/getVoterBonus/{name}/{by_longest_chain}"
        };
    }

    rpc GetCandidateBonus (GetAccountRequest) returns (CandidateBonus) {
        option (google.api.http) = {
            get: "/getCandidateBonus/{name}/{by_longest_chain}"
        };
    }

    rpc GetTokenInfo (GetTokenInfoRequest) returns (TokenInfo) {
        option (google.api.http) = {
            get: "/getTokenInfo/{symbol}/{by_longest_chain}"
        };
    }

    rpc GetBlockTxsByContract (GetBlockTxsByContractRequest) returns (BlockTxsByContractResponse) {
        option (google.api.http) = {
            post: "/getBlockTxsByContract"
            body: "*"
        };
    }

}

// The message defines an empty request.
message EmptyRequest {}

// The message defines network connection information.
message NetworkInfo {
    // local network ID
    string id = 1;
    // peer connection count
    int32 peer_count = 2;
}

// The message containing blockchain's ram information.
message RAMInfoResponse {
    // how many bytes have been used
    int64 used_ram = 1;
    // how many bytes have not been used
    int64 available_ram = 2;
    // total ram byte
    int64 total_ram = 3;
    // User can sell NUM bytes RAM to system to get `NUM * sell_price` IOSTs
    double sell_price = 4;
    // User can spend approximate `NUM * buy_price` IOSTs for NUM bytes RAM
    double buy_price = 5;
}

// The message containing the node's information.
message NodeInfoResponse {
    // build time
    string build_time = 1;
    // git hash
    string git_hash = 2;
    // node mode
    string mode = 3;
    // network connection information
    NetworkInfo network = 4;
    // code version string
    string code_version = 5;
    // server time
    int64 server_time = 6;
}

// The message defines transaction amount limit struct.
message AmountLimit {
    // token name
    string token = 1;
    // limit value
    string value = 2;
}

// The message defines transaction action struct.
message Action {
    // contract name
    string contract = 1;
    // action name
    string action_name = 2;
    // data
    string data = 3;
}

// The message defines the transaction receipt struct.
message TxReceipt {
    // transaction hash
    string tx_hash = 1;
    // gas usage
    double gas_usage = 2;
    // ram usage
    map<string, int64> ram_usage = 3;

    // The enumeration defines transaction receipt status code.
    enum StatusCode {
        // success
        SUCCESS = 0;
        // run out of gas
        GAS_RUN_OUT = 1;
        // balance not enough
        BALANCE_NOT_ENOUGH = 2;
        // wrong parameter
        WRONG_PARAMETER = 3;
        // runtime error
        RUNTIME_ERROR = 4;
        // run out of time
        TIMEOUT = 5;
        // wrong transaction format
        WRONG_TX_FORMAT = 6;
        // more than one set code action in a transaction
        DUPLICATE_SET_CODE = 7;
        // unknown error
        UNKNOWN_ERROR = 8;
    }

    // status code
    StatusCode status_code = 4;
    // message
    string message = 5;
    // transaction returns
    repeated string returns = 6;

    // The message defines transaction execution receipt.
    message Receipt {
        // function name
        string func_name = 1;
        // content
        string content = 2;
    }

    // transaction receipts
    repeated Receipt receipts = 7;
}

// The message defines transaction struct.
message Transaction {
    // transaction hash
    string hash  = 1;
    // transaction timestamp
    int64 time = 2;
    // expiration timestamp
    int64 expiration = 3;
    // gas gas_ratio
    double gas_ratio = 4;
    // gas limit
    double gas_limit = 5;
    // delay nanoseconds
    int64 delay = 6;
    // chain id
    uint32 chain_id = 7;
    // action list
    repeated Action actions = 8;
    // signer list
    repeated string signers = 9;
    // publisher
    string publisher = 10;
    // referred transaction hash
    string referred_tx = 11;
    // amount limit
    repeated AmountLimit amount_limit = 12;
    // transaction receipt
    TxReceipt tx_receipt = 13;
}

// The message defines transaction response.
message TransactionResponse {
    // The enumeration defines transaction status.
    enum Status {
        // pending in transaction pool
        PENDING = 0;
        // packed in a block that has not been confirmed
        PACKED = 1;
        // packed in a block that is irreversible
        IRREVERSIBLE = 2;
    }

    // transaction status
    Status status = 1;

    // transaction
    Transaction transaction = 2;

    // block number
    int64 block_number = 3;
}

// The message defines signature struct.
message Signature {
    // The enumeration defines the signature algorithm.
    enum Algorithm {
        // unknown
        UNKNOWN = 0;
        // secp256k1
        SECP256K1 = 1;
        // ed25519
        ED25519 = 2;
    }

    // signature algorithm
    Algorithm algorithm = 1;
    // signature bytes
    bytes signature = 2;
    // public key
    bytes public_key = 3;
}

// The message defines the transaction request.
message TransactionRequest {
    // transaction timestamp
    int64 time = 1;
    // expiration timestamp
    int64 expiration = 2;
    // gas price
    double gas_ratio = 3;
    // gas limit
    double gas_limit = 4;
    // delay nanoseconds
    int64 delay = 5;
    // chain id
    uint32 chain_id = 6;
    // action list
    repeated Action actions = 7;
    // amount limit
    repeated AmountLimit amount_limit = 8;
    // signer list
    repeated string signers = 9;
    // signatures of signers
    repeated Signature signatures = 10;
    // publisher
    string publisher = 11;
    // signatures of publisher
    repeated Signature publisher_sigs = 12;
}

// The message defines the block struct.
message Block {
    // block hash
    string hash = 1;
    // block version
    int64 version = 2;
    // parent block hash
    string parent_hash = 3;
    // transaction merkle tree root hash
    string tx_merkle_hash = 4;
    // transaction receipt merkle tree root hash
    string tx_receipt_merkle_hash = 5;
    // block number
    int64 number = 6;
    // block producer witness
    string witness = 7;
    // block timestamp
    int64 time = 8;
    // block gas usage
    double gas_usage = 9;
    // transaction count
    int64 tx_count = 10;

    // The message defines block extra information
    message Info {
        // pack mode
        int32 mode =  1;
        // transaction execution thread number
        int32 thread = 2;
        // transaction index of every batch execution
        repeated int32 batch_index = 3;
    }

    // extra information
    Info info = 11;
    // original info bytes
    string orig_info = 13;
    // block transactions
    repeated Transaction transactions = 12;
}

message BlockResponse {
    // The enumeration defines block status.
    enum Status {
        // pending in block cache
        PENDING = 0;
        // irreversible
        IRREVERSIBLE = 1;
    }

    // transaction status
    Status status = 1;
    // block
    Block block = 2;
}

message RawBlockResponse {
    // The enumeration defines block status.
    enum Status {
        // pending in block cache
        PENDING = 0;
        // irreversible
        IRREVERSIBLE = 1;
    }
    // transaction status
    Status status = 1;
    // block
    blockpb.Block block = 2;
}

message BlockHeaderByRangeResponse {
    repeated blockpb.Block block_list = 1;
}

// The message defines chain information response.
message ChainInfoResponse {
    // the name of network, such mainnet or testnet
    string net_name = 1;
    // the iost protocol version
    string protocol_version = 2;
    // chain id
    uint32 chain_id = 3;
    // head block height
    int64 head_block = 4;
    // head block hash
    string head_block_hash = 5;
    // last irreversible block number
    int64 lib_block = 6;
    // last irreversible block hash
    string lib_block_hash = 7;
    // the current witness list
    repeated string witness_list = 8;
    // the active witness list of lat irreversible block
    repeated string lib_witness_list = 9;
    // the pending witness list
    repeated string pending_witness_list = 10;
    // the head block time
    int64 head_block_time = 11;
    // the last irreversible block time
    int64 lib_block_time = 12;
}

// The request message containing the tx's hash.
message TxHashRequest {
    // tx hash
    string hash = 1;
}

// The request message containing the block's hash.
message GetBlockByHashRequest {
    // block hash
    string hash = 1;
    // complete means whether including the full transactions and transaction receipts
    bool complete = 2;
}

// The request message containing the block's number.
message GetBlockByNumberRequest {
    // block number
    int64 number = 1;
    // complete means whether including the full transactions and transaction receipts
    bool complete = 2;
}

// The request message containing range start and end
message GetBlockHeaderByRangeRequest {
    int64 start = 1;
    int64 end = 2;
}

// The message defines the account's frozen balance.
message FrozenBalance {
    // balance amount
    double amount = 1;
    // free time
    int64 time = 2;
}

// The message defines the account's vote info.
message VoteInfo {
    // option name
    string option = 1;
    // votes
    double votes = 2;
    // cleared votes
    double cleared_votes = 3;
}

message GetProducerVoteInfoRequest {
    // account name
    string account = 1;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 2;
}

message GetProducerVoteInfoResponse {
    // producer's public key
    string pubkey = 1;
    // producer's location
    string loc = 2;
    // producer's url
    string url = 3;
    // producer's net id
    string net_id = 4;
    // is producer
    bool is_producer = 5;
    // is approved
    string status = 6;
    // is online
    bool online = 7;
    // votes
    double votes = 8;
}

message GasRatioResponse {
    // lowest gas ratio in head block
    double lowest_gas_ratio = 1;
    // median gas ratio in head block
    double median_gas_ratio = 2;
}

// The message defines account struct.
message Account {
    // account name
    string name = 1;
    // account balance
    double balance = 2;

    // The message defines account pledged coin information.
    message PledgeInfo {
        // the account who pledges
        string pledger = 1;
        // pledged amount
        double amount = 2;
    }

    // The message defines account gas information.
    message  GasInfo {
        // current total gas amount
        double current_total = 1;
        double transferable_gas = 2;
        double pledge_gas = 3;
        // gas increase speed
        double increase_speed = 4;
        // gas limit
        double limit = 5;
        // pledge information
        repeated PledgeInfo pledged_info = 6;
    }

    // gas information
    GasInfo gas_info = 3;

    // The message defines account ram information.
    message RAMInfo {
        // available ram bytes
        int64 available = 1;
        // used ram bytes
        int64 used = 2;
        // total ram bytes
        int64 total = 3;
    }

    // ram information
    RAMInfo ram_info = 4;

    // The message defines permission item.
    message Item {
        // permission name or key pair id
        string id = 1;
        // whether it's a key pair
        bool is_key_pair = 2;
        // permission weight
        int64 weight = 3;
        // permission
        string permission = 4;
    }

    // The message defines a permission group.
    message Group {
        // group name
        string name = 1;
        // permission items
        repeated Item items = 2;
    }

    // The message defines the permission struct.
    message Permission {
        // permission name
        string name = 1;
        // permission groups
        repeated string group_names = 2;
        // permission items
        repeated Item items = 3;
        // permission threshold
        int64 threshold = 4;
    }

    // account permission
    map<string, Permission> permissions = 5;
    // account groups
    map<string, Group> groups = 6;

    // frozen balance information
    repeated FrozenBalance frozen_balances = 7;

    // vote information
    repeated VoteInfo vote_infos = 8;
}

// The message defines the get account request.
message GetAccountRequest {
    // account name
    string name = 1;
    // get account by longest chain's head block or last irreversible block
    bool by_longest_chain = 2;
}

// The message defines the contract struct.
message Contract {
    // contract id
    string id = 1;
    // contract code
    string code = 2;
    // contract language
    string language = 3;
    // contract version
    string version = 4;
    // original contract code
    string orig_code = 6;

    // The message defines the ABI struct.
    message ABI {
        // abi name
        string name = 1;
        // abi arguments
        repeated string args = 2;
        // abi amount limt
        repeated AmountLimit amount_limit = 3;
    }

    // contract abis
    repeated ABI abis = 5;
}

// The message defines the contract vote info
message ContractVote{
    // vote information
    repeated VoteInfo vote_infos = 1;
}

// The message defines get contract request.
message GetContractRequest {
    // contract id
    string id = 1;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 2;
}

// The message defines get contract storage request.
message GetContractStorageRequest {
    // contract id
    string id = 1;
    // the key in the StateDB
    string key = 2;
    // get the value from StateDB, field is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
    string field = 3;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 4;
}

// The message defines get contract storage response.
message GetContractStorageResponse {
    // the json string data
    string data = 1;
    // block hash
    string block_hash = 2;
    // block number
    int64 block_number = 3;
}

// The message defines get batch contract storage request.
message GetBatchContractStorageRequest {
    // contract id
    string id = 1;

    // The message defines GetContractStorage request params.
    message KeyField {
        // the key in StateDB
        string key = 1;
        // get the value from StateDB, fields is needed if StateDB[key] is a map.(we get StateDB[key][field] in this case)
        string field = 2;
    }
    // the batch query
    repeated KeyField key_fields = 2;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 3;
}

// The message defines get batch contract storage response.
message GetBatchContractStorageResponse {
    // the repeated json string data
    repeated string datas = 1;
    // block hash
    string block_hash = 2;
    // block number
    int64 block_number = 3;
}

// The message defines get contract storage request.
message GetContractStorageFieldsRequest {
    // contract id
    string id = 1;
    // get the fields from StateDB
    string key = 2;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 3;
}

// The message defines get contract storage response.
message GetContractStorageFieldsResponse {
    // the fields.
    repeated string fields = 1;
    // block hash
    string block_hash = 2;
    // block number
    int64 block_number = 3;
}

message ListContractStorageRequest {
    // contract id
    string id = 1;

    // Optional. keys will be in [from, to) and prefixed with `prefix`
    string from = 2;
    string to = 3;
    string prefix = 4;

    enum StorageType {
        // written by storage.put(..., ...)
        KV = 0;
        // written by storage.mapPut(..., ..., ...)
        MAP = 1;
    }
    StorageType storageType = 5;
    // max count to return. up to 100
    int64 limit = 6;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 7;
}


message ListContractStorageResponse {
    message Data {
        // the key in StateDB
        string key = 1;
        // the value from StateDB
        string value = 2;
    }
    repeated Data datas = 1;
    // block hash
    string block_hash = 2;
    // block number
    int64 block_number = 3;
}

// The message defines send transaction response.
message SendTransactionResponse {
    // the final transaction hash
    string hash = 1;
    // the tx_receipt of execution in advance
    TxReceipt pre_tx_receipt = 2;
}

// The message defines get token balance response.
message GetTokenBalanceResponse {
    // token balance
    double balance = 1;
    // frozen balance information
    repeated FrozenBalance frozen_balances = 2;
}

// The message defines get token balance request.
message GetTokenBalanceRequest {
    // account name
    string account = 1;
    // the token name
    string token = 2;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 3;
}

// The message defines get token721 balance response.
message GetToken721BalanceResponse {
    // token balance
    int64 balance = 1;
    // balance information
    repeated string tokenIDs = 2;
}

// The message defines get token721 info request.
message GetToken721InfoRequest {
    // the token name
    string token = 1;
    // token id
    string token_id = 2;
    // get data by longest chain's head block or last irreversible block
    bool by_longest_chain = 3;
}

// The message defines get token721 metadata response.
message GetToken721MetadataResponse {
    // token metadata
    string metadata = 1;
}
// The message defines get token721 owner response.
message GetToken721OwnerResponse {
    // token owner
    string owner = 1;
}
// The message defines event struct.
message Event {
    enum Topic {
        // contract receipt
        CONTRACT_RECEIPT = 0;
        // contract event
        CONTRACT_EVENT = 1;
    }
    // event topic
    Topic topic = 1;
    // event data
    string data = 2;
    // event time
    int64 time = 3;
}

// The message defines subscribe request.
message SubscribeRequest {
	repeated Event.Topic topics = 1;

    message Filter {
        // contract id
        string contract_id = 1;
    }
    Filter filter = 2;
}

// The message defines subscribe response.
message SubscribeResponse {
	Event event = 1;
}

// The message defines the getVoterBonus response.
message VoterBonus {
    // the totol voter bonus
    double bonus = 1;
    // the voter bonus detail
    map<string, double> detail = 2;
}

// The message defines the getCandidateBonus response.
message CandidateBonus {
    // the candidate bonus
    double bonus = 1;
}

// The message defines the get tokeninfo request.
message GetTokenInfoRequest {
    // token symbol
    string symbol = 1;
    // get tokeninfo by longest chain's head block or last irreversible block
    bool by_longest_chain = 2;
}

// The message defines the token information.
message TokenInfo {
    // token symbol
    string symbol = 1;
    // token full name
    string full_name = 2;
    // token issuer
    string issuer = 3;
    // the amount of total supply, the result is total_supply_float multiplied by deciaml
    int64 total_supply = 4;
    // the amount of current supply, the result is current_supply_float multiplied by deciaml
    int64 current_supply = 5;
    // token decimal
    int32 decimal = 6;
    // whether the token can be transfered
    bool can_transfer = 7;
    // whether the token can only be transfered by issuer
    bool only_issuer_can_transfer = 8;
    // the amount of total supply
    double total_supply_float = 9;
    // the amount of current supply
    double current_supply_float = 10;
}

message GetBlockTxsByContractRequest {
    int64 from_block = 1;
    int64 to_block = 2;
    string contract = 3;
    string action_name = 4;
}

message BlockTxs {
    // block status
    BlockResponse.Status status = 1;
    // block number
    int64 block_number = 2;
    // transaction
    repeated Transaction tx_list = 3;
}

message BlockTxsByContractResponse{
    repeated BlockTxs blocktx_list = 1;
}
