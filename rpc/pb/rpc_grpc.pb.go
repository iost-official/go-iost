// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.0
// source: rpc/pb/rpc.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ApiService_GetNodeInfo_FullMethodName              = "/rpcpb.ApiService/GetNodeInfo"
	ApiService_GetChainInfo_FullMethodName             = "/rpcpb.ApiService/GetChainInfo"
	ApiService_GetRAMInfo_FullMethodName               = "/rpcpb.ApiService/GetRAMInfo"
	ApiService_GetTxByHash_FullMethodName              = "/rpcpb.ApiService/GetTxByHash"
	ApiService_GetTxReceiptByTxHash_FullMethodName     = "/rpcpb.ApiService/GetTxReceiptByTxHash"
	ApiService_GetBlockByHash_FullMethodName           = "/rpcpb.ApiService/GetBlockByHash"
	ApiService_GetBlockByNumber_FullMethodName         = "/rpcpb.ApiService/GetBlockByNumber"
	ApiService_GetRawBlockByNumber_FullMethodName      = "/rpcpb.ApiService/GetRawBlockByNumber"
	ApiService_GetBlockHeaderByRange_FullMethodName    = "/rpcpb.ApiService/GetBlockHeaderByRange"
	ApiService_GetAccount_FullMethodName               = "/rpcpb.ApiService/GetAccount"
	ApiService_GetTokenBalance_FullMethodName          = "/rpcpb.ApiService/GetTokenBalance"
	ApiService_GetToken721Balance_FullMethodName       = "/rpcpb.ApiService/GetToken721Balance"
	ApiService_GetToken721Metadata_FullMethodName      = "/rpcpb.ApiService/GetToken721Metadata"
	ApiService_GetToken721Owner_FullMethodName         = "/rpcpb.ApiService/GetToken721Owner"
	ApiService_GetGasRatio_FullMethodName              = "/rpcpb.ApiService/GetGasRatio"
	ApiService_GetProducerVoteInfo_FullMethodName      = "/rpcpb.ApiService/GetProducerVoteInfo"
	ApiService_GetContract_FullMethodName              = "/rpcpb.ApiService/GetContract"
	ApiService_GetContractVote_FullMethodName          = "/rpcpb.ApiService/GetContractVote"
	ApiService_GetContractStorage_FullMethodName       = "/rpcpb.ApiService/GetContractStorage"
	ApiService_GetBatchContractStorage_FullMethodName  = "/rpcpb.ApiService/GetBatchContractStorage"
	ApiService_ListContractStorage_FullMethodName      = "/rpcpb.ApiService/ListContractStorage"
	ApiService_GetContractStorageFields_FullMethodName = "/rpcpb.ApiService/GetContractStorageFields"
	ApiService_SendTransaction_FullMethodName          = "/rpcpb.ApiService/SendTransaction"
	ApiService_ExecTransaction_FullMethodName          = "/rpcpb.ApiService/ExecTransaction"
	ApiService_Subscribe_FullMethodName                = "/rpcpb.ApiService/Subscribe"
	ApiService_GetVoterBonus_FullMethodName            = "/rpcpb.ApiService/GetVoterBonus"
	ApiService_GetCandidateBonus_FullMethodName        = "/rpcpb.ApiService/GetCandidateBonus"
	ApiService_GetTokenInfo_FullMethodName             = "/rpcpb.ApiService/GetTokenInfo"
	ApiService_GetBlockTxsByContract_FullMethodName    = "/rpcpb.ApiService/GetBlockTxsByContract"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	// get the node information
	GetNodeInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	// get blockchain information
	GetChainInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error)
	// get current blockchain ram information
	GetRAMInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RAMInfoResponse, error)
	// get transaction by hash
	GetTxByHash(ctx context.Context, in *TxHashRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// get transaction receipt by transaction hash
	GetTxReceiptByTxHash(ctx context.Context, in *TxHashRequest, opts ...grpc.CallOption) (*TxReceipt, error)
	// get block by hash
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// get block by number
	GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// get raw block by number, including block signature etc
	GetRawBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*RawBlockResponse, error)
	// get batch of block header
	GetBlockHeaderByRange(ctx context.Context, in *GetBlockHeaderByRangeRequest, opts ...grpc.CallOption) (*BlockHeaderByRangeResponse, error)
	// get account
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// get token balance
	GetTokenBalance(ctx context.Context, in *GetTokenBalanceRequest, opts ...grpc.CallOption) (*GetTokenBalanceResponse, error)
	// get token721 balance
	GetToken721Balance(ctx context.Context, in *GetTokenBalanceRequest, opts ...grpc.CallOption) (*GetToken721BalanceResponse, error)
	// get token721 metadata
	GetToken721Metadata(ctx context.Context, in *GetToken721InfoRequest, opts ...grpc.CallOption) (*GetToken721MetadataResponse, error)
	// get token721 owner
	GetToken721Owner(ctx context.Context, in *GetToken721InfoRequest, opts ...grpc.CallOption) (*GetToken721OwnerResponse, error)
	// get gas ratio infomation
	GetGasRatio(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GasRatioResponse, error)
	// get producer vote infomation
	GetProducerVoteInfo(ctx context.Context, in *GetProducerVoteInfoRequest, opts ...grpc.CallOption) (*GetProducerVoteInfoResponse, error)
	// get contract
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*Contract, error)
	// get contract vote
	GetContractVote(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*ContractVote, error)
	// get contract storage
	GetContractStorage(ctx context.Context, in *GetContractStorageRequest, opts ...grpc.CallOption) (*GetContractStorageResponse, error)
	// get batch contract storage
	GetBatchContractStorage(ctx context.Context, in *GetBatchContractStorageRequest, opts ...grpc.CallOption) (*GetBatchContractStorageResponse, error)
	ListContractStorage(ctx context.Context, in *ListContractStorageRequest, opts ...grpc.CallOption) (*ListContractStorageResponse, error)
	// get contract fields storage
	GetContractStorageFields(ctx context.Context, in *GetContractStorageFieldsRequest, opts ...grpc.CallOption) (*GetContractStorageFieldsResponse, error)
	// send transaction
	SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// execute transaction
	ExecTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TxReceipt, error)
	// subscribe an event
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
	GetVoterBonus(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*VoterBonus, error)
	GetCandidateBonus(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*CandidateBonus, error)
	GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*TokenInfo, error)
	GetBlockTxsByContract(ctx context.Context, in *GetBlockTxsByContractRequest, opts ...grpc.CallOption) (*BlockTxsByContractResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetNodeInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, ApiService_GetNodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetChainInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChainInfoResponse)
	err := c.cc.Invoke(ctx, ApiService_GetChainInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRAMInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*RAMInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RAMInfoResponse)
	err := c.cc.Invoke(ctx, ApiService_GetRAMInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTxByHash(ctx context.Context, in *TxHashRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, ApiService_GetTxByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTxReceiptByTxHash(ctx context.Context, in *TxHashRequest, opts ...grpc.CallOption) (*TxReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, ApiService_GetTxReceiptByTxHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, ApiService_GetBlockByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, ApiService_GetBlockByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetRawBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*RawBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawBlockResponse)
	err := c.cc.Invoke(ctx, ApiService_GetRawBlockByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockHeaderByRange(ctx context.Context, in *GetBlockHeaderByRangeRequest, opts ...grpc.CallOption) (*BlockHeaderByRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockHeaderByRangeResponse)
	err := c.cc.Invoke(ctx, ApiService_GetBlockHeaderByRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, ApiService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTokenBalance(ctx context.Context, in *GetTokenBalanceRequest, opts ...grpc.CallOption) (*GetTokenBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenBalanceResponse)
	err := c.cc.Invoke(ctx, ApiService_GetTokenBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetToken721Balance(ctx context.Context, in *GetTokenBalanceRequest, opts ...grpc.CallOption) (*GetToken721BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToken721BalanceResponse)
	err := c.cc.Invoke(ctx, ApiService_GetToken721Balance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetToken721Metadata(ctx context.Context, in *GetToken721InfoRequest, opts ...grpc.CallOption) (*GetToken721MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToken721MetadataResponse)
	err := c.cc.Invoke(ctx, ApiService_GetToken721Metadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetToken721Owner(ctx context.Context, in *GetToken721InfoRequest, opts ...grpc.CallOption) (*GetToken721OwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToken721OwnerResponse)
	err := c.cc.Invoke(ctx, ApiService_GetToken721Owner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetGasRatio(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GasRatioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GasRatioResponse)
	err := c.cc.Invoke(ctx, ApiService_GetGasRatio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProducerVoteInfo(ctx context.Context, in *GetProducerVoteInfoRequest, opts ...grpc.CallOption) (*GetProducerVoteInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProducerVoteInfoResponse)
	err := c.cc.Invoke(ctx, ApiService_GetProducerVoteInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*Contract, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contract)
	err := c.cc.Invoke(ctx, ApiService_GetContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetContractVote(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*ContractVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractVote)
	err := c.cc.Invoke(ctx, ApiService_GetContractVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetContractStorage(ctx context.Context, in *GetContractStorageRequest, opts ...grpc.CallOption) (*GetContractStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractStorageResponse)
	err := c.cc.Invoke(ctx, ApiService_GetContractStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBatchContractStorage(ctx context.Context, in *GetBatchContractStorageRequest, opts ...grpc.CallOption) (*GetBatchContractStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatchContractStorageResponse)
	err := c.cc.Invoke(ctx, ApiService_GetBatchContractStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListContractStorage(ctx context.Context, in *ListContractStorageRequest, opts ...grpc.CallOption) (*ListContractStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContractStorageResponse)
	err := c.cc.Invoke(ctx, ApiService_ListContractStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetContractStorageFields(ctx context.Context, in *GetContractStorageFieldsRequest, opts ...grpc.CallOption) (*GetContractStorageFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractStorageFieldsResponse)
	err := c.cc.Invoke(ctx, ApiService_GetContractStorageFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, ApiService_SendTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ExecTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TxReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, ApiService_ExecTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], ApiService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) GetVoterBonus(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*VoterBonus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoterBonus)
	err := c.cc.Invoke(ctx, ApiService_GetVoterBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCandidateBonus(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*CandidateBonus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CandidateBonus)
	err := c.cc.Invoke(ctx, ApiService_GetCandidateBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*TokenInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, ApiService_GetTokenInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockTxsByContract(ctx context.Context, in *GetBlockTxsByContractRequest, opts ...grpc.CallOption) (*BlockTxsByContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockTxsByContractResponse)
	err := c.cc.Invoke(ctx, ApiService_GetBlockTxsByContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations should embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	// get the node information
	GetNodeInfo(context.Context, *EmptyRequest) (*NodeInfoResponse, error)
	// get blockchain information
	GetChainInfo(context.Context, *EmptyRequest) (*ChainInfoResponse, error)
	// get current blockchain ram information
	GetRAMInfo(context.Context, *EmptyRequest) (*RAMInfoResponse, error)
	// get transaction by hash
	GetTxByHash(context.Context, *TxHashRequest) (*TransactionResponse, error)
	// get transaction receipt by transaction hash
	GetTxReceiptByTxHash(context.Context, *TxHashRequest) (*TxReceipt, error)
	// get block by hash
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*BlockResponse, error)
	// get block by number
	GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*BlockResponse, error)
	// get raw block by number, including block signature etc
	GetRawBlockByNumber(context.Context, *GetBlockByNumberRequest) (*RawBlockResponse, error)
	// get batch of block header
	GetBlockHeaderByRange(context.Context, *GetBlockHeaderByRangeRequest) (*BlockHeaderByRangeResponse, error)
	// get account
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	// get token balance
	GetTokenBalance(context.Context, *GetTokenBalanceRequest) (*GetTokenBalanceResponse, error)
	// get token721 balance
	GetToken721Balance(context.Context, *GetTokenBalanceRequest) (*GetToken721BalanceResponse, error)
	// get token721 metadata
	GetToken721Metadata(context.Context, *GetToken721InfoRequest) (*GetToken721MetadataResponse, error)
	// get token721 owner
	GetToken721Owner(context.Context, *GetToken721InfoRequest) (*GetToken721OwnerResponse, error)
	// get gas ratio infomation
	GetGasRatio(context.Context, *EmptyRequest) (*GasRatioResponse, error)
	// get producer vote infomation
	GetProducerVoteInfo(context.Context, *GetProducerVoteInfoRequest) (*GetProducerVoteInfoResponse, error)
	// get contract
	GetContract(context.Context, *GetContractRequest) (*Contract, error)
	// get contract vote
	GetContractVote(context.Context, *GetContractRequest) (*ContractVote, error)
	// get contract storage
	GetContractStorage(context.Context, *GetContractStorageRequest) (*GetContractStorageResponse, error)
	// get batch contract storage
	GetBatchContractStorage(context.Context, *GetBatchContractStorageRequest) (*GetBatchContractStorageResponse, error)
	ListContractStorage(context.Context, *ListContractStorageRequest) (*ListContractStorageResponse, error)
	// get contract fields storage
	GetContractStorageFields(context.Context, *GetContractStorageFieldsRequest) (*GetContractStorageFieldsResponse, error)
	// send transaction
	SendTransaction(context.Context, *TransactionRequest) (*SendTransactionResponse, error)
	// execute transaction
	ExecTransaction(context.Context, *TransactionRequest) (*TxReceipt, error)
	// subscribe an event
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
	GetVoterBonus(context.Context, *GetAccountRequest) (*VoterBonus, error)
	GetCandidateBonus(context.Context, *GetAccountRequest) (*CandidateBonus, error)
	GetTokenInfo(context.Context, *GetTokenInfoRequest) (*TokenInfo, error)
	GetBlockTxsByContract(context.Context, *GetBlockTxsByContractRequest) (*BlockTxsByContractResponse, error)
}

// UnimplementedApiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) GetNodeInfo(context.Context, *EmptyRequest) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedApiServiceServer) GetChainInfo(context.Context, *EmptyRequest) (*ChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (UnimplementedApiServiceServer) GetRAMInfo(context.Context, *EmptyRequest) (*RAMInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRAMInfo not implemented")
}
func (UnimplementedApiServiceServer) GetTxByHash(context.Context, *TxHashRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByHash not implemented")
}
func (UnimplementedApiServiceServer) GetTxReceiptByTxHash(context.Context, *TxHashRequest) (*TxReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxReceiptByTxHash not implemented")
}
func (UnimplementedApiServiceServer) GetBlockByHash(context.Context, *GetBlockByHashRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedApiServiceServer) GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedApiServiceServer) GetRawBlockByNumber(context.Context, *GetBlockByNumberRequest) (*RawBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawBlockByNumber not implemented")
}
func (UnimplementedApiServiceServer) GetBlockHeaderByRange(context.Context, *GetBlockHeaderByRangeRequest) (*BlockHeaderByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByRange not implemented")
}
func (UnimplementedApiServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedApiServiceServer) GetTokenBalance(context.Context, *GetTokenBalanceRequest) (*GetTokenBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBalance not implemented")
}
func (UnimplementedApiServiceServer) GetToken721Balance(context.Context, *GetTokenBalanceRequest) (*GetToken721BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken721Balance not implemented")
}
func (UnimplementedApiServiceServer) GetToken721Metadata(context.Context, *GetToken721InfoRequest) (*GetToken721MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken721Metadata not implemented")
}
func (UnimplementedApiServiceServer) GetToken721Owner(context.Context, *GetToken721InfoRequest) (*GetToken721OwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken721Owner not implemented")
}
func (UnimplementedApiServiceServer) GetGasRatio(context.Context, *EmptyRequest) (*GasRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasRatio not implemented")
}
func (UnimplementedApiServiceServer) GetProducerVoteInfo(context.Context, *GetProducerVoteInfoRequest) (*GetProducerVoteInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducerVoteInfo not implemented")
}
func (UnimplementedApiServiceServer) GetContract(context.Context, *GetContractRequest) (*Contract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedApiServiceServer) GetContractVote(context.Context, *GetContractRequest) (*ContractVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractVote not implemented")
}
func (UnimplementedApiServiceServer) GetContractStorage(context.Context, *GetContractStorageRequest) (*GetContractStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractStorage not implemented")
}
func (UnimplementedApiServiceServer) GetBatchContractStorage(context.Context, *GetBatchContractStorageRequest) (*GetBatchContractStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchContractStorage not implemented")
}
func (UnimplementedApiServiceServer) ListContractStorage(context.Context, *ListContractStorageRequest) (*ListContractStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContractStorage not implemented")
}
func (UnimplementedApiServiceServer) GetContractStorageFields(context.Context, *GetContractStorageFieldsRequest) (*GetContractStorageFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractStorageFields not implemented")
}
func (UnimplementedApiServiceServer) SendTransaction(context.Context, *TransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedApiServiceServer) ExecTransaction(context.Context, *TransactionRequest) (*TxReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTransaction not implemented")
}
func (UnimplementedApiServiceServer) Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedApiServiceServer) GetVoterBonus(context.Context, *GetAccountRequest) (*VoterBonus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoterBonus not implemented")
}
func (UnimplementedApiServiceServer) GetCandidateBonus(context.Context, *GetAccountRequest) (*CandidateBonus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidateBonus not implemented")
}
func (UnimplementedApiServiceServer) GetTokenInfo(context.Context, *GetTokenInfoRequest) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (UnimplementedApiServiceServer) GetBlockTxsByContract(context.Context, *GetBlockTxsByContractRequest) (*BlockTxsByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTxsByContract not implemented")
}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNodeInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetChainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetChainInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRAMInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRAMInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetRAMInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRAMInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTxByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTxByHash(ctx, req.(*TxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTxReceiptByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTxReceiptByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTxReceiptByTxHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTxReceiptByTxHash(ctx, req.(*TxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBlockByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByNumber(ctx, req.(*GetBlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetRawBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetRawBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetRawBlockByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetRawBlockByNumber(ctx, req.(*GetBlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockHeaderByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeaderByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockHeaderByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBlockHeaderByRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockHeaderByRange(ctx, req.(*GetBlockHeaderByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTokenBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTokenBalance(ctx, req.(*GetTokenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetToken721Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetToken721Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetToken721Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetToken721Balance(ctx, req.(*GetTokenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetToken721Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToken721InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetToken721Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetToken721Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetToken721Metadata(ctx, req.(*GetToken721InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetToken721Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToken721InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetToken721Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetToken721Owner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetToken721Owner(ctx, req.(*GetToken721InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetGasRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetGasRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetGasRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetGasRatio(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetProducerVoteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProducerVoteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetProducerVoteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetProducerVoteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetProducerVoteInfo(ctx, req.(*GetProducerVoteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetContractVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetContractVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetContractVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetContractVote(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetContractStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetContractStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetContractStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetContractStorage(ctx, req.(*GetContractStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBatchContractStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchContractStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBatchContractStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBatchContractStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBatchContractStorage(ctx, req.(*GetBatchContractStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListContractStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListContractStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListContractStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListContractStorage(ctx, req.(*ListContractStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetContractStorageFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractStorageFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetContractStorageFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetContractStorageFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetContractStorageFields(ctx, req.(*GetContractStorageFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ExecTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ExecTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ExecTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ExecTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{ServerStream: stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_GetVoterBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetVoterBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetVoterBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetVoterBonus(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCandidateBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCandidateBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetCandidateBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCandidateBonus(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTokenInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTokenInfo(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockTxsByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockTxsByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockTxsByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBlockTxsByContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockTxsByContract(ctx, req.(*GetBlockTxsByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _ApiService_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetChainInfo",
			Handler:    _ApiService_GetChainInfo_Handler,
		},
		{
			MethodName: "GetRAMInfo",
			Handler:    _ApiService_GetRAMInfo_Handler,
		},
		{
			MethodName: "GetTxByHash",
			Handler:    _ApiService_GetTxByHash_Handler,
		},
		{
			MethodName: "GetTxReceiptByTxHash",
			Handler:    _ApiService_GetTxReceiptByTxHash_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _ApiService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _ApiService_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetRawBlockByNumber",
			Handler:    _ApiService_GetRawBlockByNumber_Handler,
		},
		{
			MethodName: "GetBlockHeaderByRange",
			Handler:    _ApiService_GetBlockHeaderByRange_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ApiService_GetAccount_Handler,
		},
		{
			MethodName: "GetTokenBalance",
			Handler:    _ApiService_GetTokenBalance_Handler,
		},
		{
			MethodName: "GetToken721Balance",
			Handler:    _ApiService_GetToken721Balance_Handler,
		},
		{
			MethodName: "GetToken721Metadata",
			Handler:    _ApiService_GetToken721Metadata_Handler,
		},
		{
			MethodName: "GetToken721Owner",
			Handler:    _ApiService_GetToken721Owner_Handler,
		},
		{
			MethodName: "GetGasRatio",
			Handler:    _ApiService_GetGasRatio_Handler,
		},
		{
			MethodName: "GetProducerVoteInfo",
			Handler:    _ApiService_GetProducerVoteInfo_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _ApiService_GetContract_Handler,
		},
		{
			MethodName: "GetContractVote",
			Handler:    _ApiService_GetContractVote_Handler,
		},
		{
			MethodName: "GetContractStorage",
			Handler:    _ApiService_GetContractStorage_Handler,
		},
		{
			MethodName: "GetBatchContractStorage",
			Handler:    _ApiService_GetBatchContractStorage_Handler,
		},
		{
			MethodName: "ListContractStorage",
			Handler:    _ApiService_ListContractStorage_Handler,
		},
		{
			MethodName: "GetContractStorageFields",
			Handler:    _ApiService_GetContractStorageFields_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ApiService_SendTransaction_Handler,
		},
		{
			MethodName: "ExecTransaction",
			Handler:    _ApiService_ExecTransaction_Handler,
		},
		{
			MethodName: "GetVoterBonus",
			Handler:    _ApiService_GetVoterBonus_Handler,
		},
		{
			MethodName: "GetCandidateBonus",
			Handler:    _ApiService_GetCandidateBonus_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _ApiService_GetTokenInfo_Handler,
		},
		{
			MethodName: "GetBlockTxsByContract",
			Handler:    _ApiService_GetBlockTxsByContract_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/pb/rpc.proto",
}
