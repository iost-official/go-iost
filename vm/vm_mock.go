// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/go-iost/v3/vm (interfaces: VM)

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	contract "github.com/iost-official/go-iost/v3/core/contract"
	host "github.com/iost-official/go-iost/v3/vm/host"
)

// MockVM is a mock of VM interface
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// Compile mocks base method
func (m *MockVM) Compile(arg0 *contract.Contract) (string, error) {
	ret := m.ctrl.Call(m, "Compile", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compile indicates an expected call of Compile
func (mr *MockVMMockRecorder) Compile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockVM)(nil).Compile), arg0)
}

// Init mocks base method
func (m *MockVM) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockVMMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockVM)(nil).Init))
}

// LoadAndCall mocks base method
func (m *MockVM) LoadAndCall(arg0 *host.Host, arg1 *contract.Contract, arg2 string, arg3 ...interface{}) ([]interface{}, contract.Cost, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadAndCall", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(contract.Cost)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadAndCall indicates an expected call of LoadAndCall
func (mr *MockVMMockRecorder) LoadAndCall(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndCall", reflect.TypeOf((*MockVM)(nil).LoadAndCall), varargs...)
}

// Release mocks base method
func (m *MockVM) Release() {
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release
func (mr *MockVMMockRecorder) Release() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockVM)(nil).Release))
}

// Validate mocks base method
func (m *MockVM) Validate(arg0 *contract.Contract) error {
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockVMMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockVM)(nil).Validate), arg0)
}
