// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: core/merkletree/merkle_tree.proto

package merkletree

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MerkleTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashList [][]byte         `protobuf:"bytes,1,rep,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
	Hash2Idx map[string]int32 `protobuf:"bytes,2,rep,name=hash2_idx,json=hash2Idx,proto3" json:"hash2_idx,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LeafNum  int32            `protobuf:"varint,3,opt,name=leaf_num,json=leafNum,proto3" json:"leaf_num,omitempty"`
}

func (x *MerkleTree) Reset() {
	*x = MerkleTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_merkletree_merkle_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTree) ProtoMessage() {}

func (x *MerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_core_merkletree_merkle_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTree.ProtoReflect.Descriptor instead.
func (*MerkleTree) Descriptor() ([]byte, []int) {
	return file_core_merkletree_merkle_tree_proto_rawDescGZIP(), []int{0}
}

func (x *MerkleTree) GetHashList() [][]byte {
	if x != nil {
		return x.HashList
	}
	return nil
}

func (x *MerkleTree) GetHash2Idx() map[string]int32 {
	if x != nil {
		return x.Hash2Idx
	}
	return nil
}

func (x *MerkleTree) GetLeafNum() int32 {
	if x != nil {
		return x.LeafNum
	}
	return 0
}

type TXRMerkleTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mt     *MerkleTree       `protobuf:"bytes,1,opt,name=mt,proto3" json:"mt,omitempty"`
	Tx2Txr map[string][]byte `protobuf:"bytes,2,rep,name=tx2_txr,json=tx2Txr,proto3" json:"tx2_txr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TXRMerkleTree) Reset() {
	*x = TXRMerkleTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_merkletree_merkle_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TXRMerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TXRMerkleTree) ProtoMessage() {}

func (x *TXRMerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_core_merkletree_merkle_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TXRMerkleTree.ProtoReflect.Descriptor instead.
func (*TXRMerkleTree) Descriptor() ([]byte, []int) {
	return file_core_merkletree_merkle_tree_proto_rawDescGZIP(), []int{1}
}

func (x *TXRMerkleTree) GetMt() *MerkleTree {
	if x != nil {
		return x.Mt
	}
	return nil
}

func (x *TXRMerkleTree) GetTx2Txr() map[string][]byte {
	if x != nil {
		return x.Tx2Txr
	}
	return nil
}

var File_core_merkletree_merkle_tree_proto protoreflect.FileDescriptor

var file_core_merkletree_merkle_tree_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x72, 0x65,
	0x65, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x32, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x32, 0x49, 0x64, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x32, 0x49, 0x64, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x4e, 0x75, 0x6d, 0x1a, 0x3b, 0x0a, 0x0d, 0x48, 0x61, 0x73,
	0x68, 0x32, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0d, 0x54, 0x58, 0x52, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x6d, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x02, 0x6d, 0x74,
	0x12, 0x3e, 0x0a, 0x07, 0x74, 0x78, 0x32, 0x5f, 0x74, 0x78, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x54,
	0x58, 0x52, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x78, 0x32,
	0x54, 0x78, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x78, 0x32, 0x54, 0x78, 0x72,
	0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x78, 0x32, 0x54, 0x78, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x73, 0x74, 0x2d, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x2f, 0x67, 0x6f, 0x2d, 0x69, 0x6f, 0x73, 0x74, 0x2f,
	0x76, 0x33, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x72,
	0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_merkletree_merkle_tree_proto_rawDescOnce sync.Once
	file_core_merkletree_merkle_tree_proto_rawDescData = file_core_merkletree_merkle_tree_proto_rawDesc
)

func file_core_merkletree_merkle_tree_proto_rawDescGZIP() []byte {
	file_core_merkletree_merkle_tree_proto_rawDescOnce.Do(func() {
		file_core_merkletree_merkle_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_merkletree_merkle_tree_proto_rawDescData)
	})
	return file_core_merkletree_merkle_tree_proto_rawDescData
}

var file_core_merkletree_merkle_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_core_merkletree_merkle_tree_proto_goTypes = []interface{}{
	(*MerkleTree)(nil),    // 0: merkletree.MerkleTree
	(*TXRMerkleTree)(nil), // 1: merkletree.TXRMerkleTree
	nil,                   // 2: merkletree.MerkleTree.Hash2IdxEntry
	nil,                   // 3: merkletree.TXRMerkleTree.Tx2TxrEntry
}
var file_core_merkletree_merkle_tree_proto_depIdxs = []int32{
	2, // 0: merkletree.MerkleTree.hash2_idx:type_name -> merkletree.MerkleTree.Hash2IdxEntry
	0, // 1: merkletree.TXRMerkleTree.mt:type_name -> merkletree.MerkleTree
	3, // 2: merkletree.TXRMerkleTree.tx2_txr:type_name -> merkletree.TXRMerkleTree.Tx2TxrEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_core_merkletree_merkle_tree_proto_init() }
func file_core_merkletree_merkle_tree_proto_init() {
	if File_core_merkletree_merkle_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_merkletree_merkle_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_merkletree_merkle_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TXRMerkleTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_merkletree_merkle_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_merkletree_merkle_tree_proto_goTypes,
		DependencyIndexes: file_core_merkletree_merkle_tree_proto_depIdxs,
		MessageInfos:      file_core_merkletree_merkle_tree_proto_msgTypes,
	}.Build()
	File_core_merkletree_merkle_tree_proto = out.File
	file_core_merkletree_merkle_tree_proto_rawDesc = nil
	file_core_merkletree_merkle_tree_proto_goTypes = nil
	file_core_merkletree_merkle_tree_proto_depIdxs = nil
}
